package main

import (
	"bytes"
	"flag"
	"fmt"
	"log"
	"os"
	"regexp"
	"strings"
	"unicode"

	"github.com/MakeNowJust/heredoc/v2"
	"github.com/cloudspannerecosystem/memefish/tools/util/poslang"
)

var (
	usage = heredoc.Doc(`
		Usage of tools/gen-ast-pos.go

		A generator of ast/pos.go.

		Example:

		  $ go run ./tools/gen-ast-pos/main.go -infile ast/ast.go
		        Print the generated ast/pos.go to stdout.

		Flags:
	`)
	prologue = heredoc.Doc(`
		// Code generated by tools/gen-ast-pos; DO NOT EDIT.

		package ast

		import (
			"github.com/cloudspannerecosystem/memefish/token"
		)
	`)
)

var (
	infile  = flag.String("infile", "", "input filename")
	outfile = flag.String("outfile", "", "output filename (if it is not specified, the result is printed to stdout.)")
)

var (
	reNameLine = regexp.MustCompile(`^\s*type\s+(\w+)\s+struct\s*\{`)
	rePosLine  = regexp.MustCompile(`^\s*//\s*pos\s*=\s*(.*)`)
	reEndLine  = regexp.MustCompile(`^\s*//\s*end\s*=\s*(.*)`)
)

type astNode struct {
	name             string
	posExpr, endExpr poslang.PosExpr
}

func main() {
	flag.Usage = func() {
		fmt.Print(usage)
		flag.PrintDefaults()
	}

	flag.Parse()

	source, err := os.ReadFile(*infile)
	if err != nil {
		log.Fatal(err)
	}

	var nodes []*astNode

	for _, line := range strings.Split(string(source), "\n") {
		if m := reNameLine.FindStringSubmatch(line); m != nil {
			name := m[1]
			nodes = append(nodes, &astNode{name: name})
			continue
		}

		if m := rePosLine.FindStringSubmatch(line); m != nil {
			e := m[1]
			expr, err := poslang.Parse(e)
			if err != nil {
				log.Fatal(err)
			}
			nodes[len(nodes)-1].posExpr = expr
			continue
		}

		if m := reEndLine.FindStringSubmatch(line); m != nil {
			e := m[1]
			expr, err := poslang.Parse(e)
			if err != nil {
				log.Fatal(err)
			}
			nodes[len(nodes)-1].endExpr = expr
			continue
		}
	}

	var buffer bytes.Buffer
	buffer.WriteString(prologue)

	for _, node := range nodes {
		x := string(unicode.ToLower(rune(node.name[0])))

		fmt.Fprintln(&buffer)
		fmt.Fprintf(&buffer, "func (%s *%s) Pos() token.Pos {\n", x, node.name)
		fmt.Fprintf(&buffer, "\treturn %s\n", node.posExpr.PosExprToGo(x))
		fmt.Fprintf(&buffer, "}\n")
		fmt.Fprintln(&buffer)
		fmt.Fprintf(&buffer, "func (%s *%s) End() token.Pos {\n", x, node.name)
		fmt.Fprintf(&buffer, "\treturn %s\n", node.endExpr.PosExprToGo(x))
		fmt.Fprintf(&buffer, "}\n")
	}

	if *outfile == "" {
		fmt.Print(buffer.String())
		return
	}

	err = os.WriteFile(*outfile, buffer.Bytes(), 0666)
	if err != nil {
		log.Fatal(err)
	}
}
