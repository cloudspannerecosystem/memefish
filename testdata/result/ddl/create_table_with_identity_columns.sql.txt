--- create_table_with_identity_columns.sql
create table foo (
    id int64 generated by default as identity (
        bit_reversed_positive start counter with 1000 skip range 1, 12345),
    startCount int64 generated by default as identity (
        bit_reversed_positive start counter with 1000),
    skipRange int64 generated by default as identity (
        bit_reversed_positive skip range 1000, 2000),
    simple int64 generated by default as identity ( bit_reversed_positive),
) primary key (id)

--- AST
&ast.CreateTable{
  Create:      0,
  Rparen:      457,
  IfNotExists: false,
  Name:        &ast.Path{
    Idents: []*ast.Ident{
      &ast.Ident{
        NamePos: 13,
        NameEnd: 16,
        Name:    "foo",
      },
    },
  },
  Columns: []*ast.ColumnDef{
    &ast.ColumnDef{
      Null: -1,
      Name: &ast.Ident{
        NamePos: 23,
        NameEnd: 25,
        Name:    "id",
      },
      Type: &ast.ScalarSchemaType{
        NamePos: 26,
        Name:    "INT64",
      },
      NotNull:        false,
      DefaultExpr:    (*ast.ColumnDefaultExpr)(nil),
      GeneratedExpr:  (*ast.GeneratedColumnExpr)(nil),
      IdentityColumn: &ast.IdentityColumn{
        Generated: 32,
        Identity:  56,
        Rparen:    140,
        Params:    []ast.SequenceParam{
          &ast.SequenceParamBitReversedPositive{
            BitReversedPositive: 75,
          },
          &ast.SequenceParamStartCounterWith{
            Start:   97,
            Counter: &ast.IntLiteral{
              ValuePos: 116,
              ValueEnd: 120,
              Base:     10,
              Value:    "1000",
            },
          },
          &ast.SequenceParamSkipRange{
            Skip: 121,
            Min:  &ast.IntLiteral{
              ValuePos: 132,
              ValueEnd: 133,
              Base:     10,
              Value:    "1",
            },
            Max: &ast.IntLiteral{
              ValuePos: 135,
              ValueEnd: 140,
              Base:     10,
              Value:    "12345",
            },
          },
        },
      },
      Hidden:  -1,
      Options: (*ast.Options)(nil),
    },
    &ast.ColumnDef{
      Null: -1,
      Name: &ast.Ident{
        NamePos: 147,
        NameEnd: 157,
        Name:    "startCount",
      },
      Type: &ast.ScalarSchemaType{
        NamePos: 158,
        Name:    "INT64",
      },
      NotNull:        false,
      DefaultExpr:    (*ast.ColumnDefaultExpr)(nil),
      GeneratedExpr:  (*ast.GeneratedColumnExpr)(nil),
      IdentityColumn: &ast.IdentityColumn{
        Generated: 164,
        Identity:  188,
        Rparen:    252,
        Params:    []ast.SequenceParam{
          &ast.SequenceParamBitReversedPositive{
            BitReversedPositive: 207,
          },
          &ast.SequenceParamStartCounterWith{
            Start:   229,
            Counter: &ast.IntLiteral{
              ValuePos: 248,
              ValueEnd: 252,
              Base:     10,
              Value:    "1000",
            },
          },
        },
      },
      Hidden:  -1,
      Options: (*ast.Options)(nil),
    },
    &ast.ColumnDef{
      Null: -1,
      Name: &ast.Ident{
        NamePos: 259,
        NameEnd: 268,
        Name:    "skipRange",
      },
      Type: &ast.ScalarSchemaType{
        NamePos: 269,
        Name:    "INT64",
      },
      NotNull:        false,
      DefaultExpr:    (*ast.ColumnDefaultExpr)(nil),
      GeneratedExpr:  (*ast.GeneratedColumnExpr)(nil),
      IdentityColumn: &ast.IdentityColumn{
        Generated: 275,
        Identity:  299,
        Rparen:    361,
        Params:    []ast.SequenceParam{
          &ast.SequenceParamBitReversedPositive{
            BitReversedPositive: 318,
          },
          &ast.SequenceParamSkipRange{
            Skip: 340,
            Min:  &ast.IntLiteral{
              ValuePos: 351,
              ValueEnd: 355,
              Base:     10,
              Value:    "1000",
            },
            Max: &ast.IntLiteral{
              ValuePos: 357,
              ValueEnd: 361,
              Base:     10,
              Value:    "2000",
            },
          },
        },
      },
      Hidden:  -1,
      Options: (*ast.Options)(nil),
    },
    &ast.ColumnDef{
      Null: -1,
      Name: &ast.Ident{
        NamePos: 368,
        NameEnd: 374,
        Name:    "simple",
      },
      Type: &ast.ScalarSchemaType{
        NamePos: 375,
        Name:    "INT64",
      },
      NotNull:        false,
      DefaultExpr:    (*ast.ColumnDefaultExpr)(nil),
      GeneratedExpr:  (*ast.GeneratedColumnExpr)(nil),
      IdentityColumn: &ast.IdentityColumn{
        Generated: 381,
        Identity:  405,
        Rparen:    437,
        Params:    []ast.SequenceParam{
          &ast.SequenceParamBitReversedPositive{
            BitReversedPositive: 416,
          },
        },
      },
      Hidden:  -1,
      Options: (*ast.Options)(nil),
    },
  },
  TableConstraints: []*ast.TableConstraint(nil),
  PrimaryKeys:      []*ast.IndexKey{
    &ast.IndexKey{
      DirPos: -1,
      Name:   &ast.Ident{
        NamePos: 455,
        NameEnd: 457,
        Name:    "id",
      },
      Dir: "",
    },
  },
  Synonyms:          []*ast.Synonym(nil),
  Cluster:           (*ast.Cluster)(nil),
  RowDeletionPolicy: (*ast.CreateRowDeletionPolicy)(nil),
}

--- SQL
CREATE TABLE foo (id INT64, startCount INT64, skipRange INT64, simple INT64) PRIMARY KEY (id)
