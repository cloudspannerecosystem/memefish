--- select_from_implicit_unnest.sql
SELECT a, off
FROM UNNEST([STRUCT<arr ARRAY<STRING>>(["foo"])]) AS t,
     t.arr AS a WITH OFFSET AS off
--- AST
&ast.QueryStatement{
  Hint:  (*ast.Hint)(nil),
  With:  (*ast.With)(nil),
  Query: &ast.Select{
    Select:   0,
    Distinct: false,
    As:       nil,
    Results:  []ast.SelectItem{
      &ast.ExprSelectItem{
        Expr: &ast.Ident{
          NamePos: 7,
          NameEnd: 8,
          Name:    "a",
        },
      },
      &ast.ExprSelectItem{
        Expr: &ast.Ident{
          NamePos: 10,
          NameEnd: 13,
          Name:    "off",
        },
      },
    },
    From: &ast.From{
      From:   14,
      Source: &ast.Join{
        Op:     ",",
        Method: "",
        Hint:   (*ast.Hint)(nil),
        Left:   &ast.Unnest{
          Unnest: 19,
          Rparen: 62,
          Expr:   &ast.ArrayLiteral{
            Array:  -1,
            Lbrack: 26,
            Rbrack: 61,
            Type:   nil,
            Values: []ast.Expr{
              &ast.StructLiteral{
                Struct: 27,
                Lparen: 52,
                Rparen: 60,
                Fields: []*ast.StructField{
                  &ast.StructField{
                    Ident: &ast.Ident{
                      NamePos: 34,
                      NameEnd: 37,
                      Name:    "arr",
                    },
                    Type: &ast.ArrayType{
                      Array: 38,
                      Gt:    50,
                      Item:  &ast.SimpleType{
                        NamePos: 44,
                        Name:    "STRING",
                      },
                    },
                  },
                },
                Values: []ast.Expr{
                  &ast.ArrayLiteral{
                    Array:  -1,
                    Lbrack: 53,
                    Rbrack: 59,
                    Type:   nil,
                    Values: []ast.Expr{
                      &ast.StringLiteral{
                        ValuePos: 54,
                        ValueEnd: 59,
                        Value:    "foo",
                      },
                    },
                  },
                },
              },
            },
          },
          Hint: (*ast.Hint)(nil),
          As:   &ast.AsAlias{
            As:    -1,
            Alias: &ast.Ident{
              NamePos: 67,
              NameEnd: 68,
              Name:    "t",
            },
          },
          WithOffset: (*ast.WithOffset)(nil),
          Sample:     (*ast.TableSample)(nil),
        },
        Right: &ast.PathTableExpr{
          Path: &ast.Path{
            Idents: []*ast.Ident{
              &ast.Ident{
                NamePos: 75,
                NameEnd: 76,
                Name:    "t",
              },
              &ast.Ident{
                NamePos: 77,
                NameEnd: 80,
                Name:    "arr",
              },
            },
          },
          Hint: (*ast.Hint)(nil),
          As:   &ast.AsAlias{
            As:    -1,
            Alias: &ast.Ident{
              NamePos: 84,
              NameEnd: 85,
              Name:    "a",
            },
          },
          WithOffset: &ast.WithOffset{
            With:   86,
            Offset: 91,
            As:     &ast.AsAlias{
              As:    -1,
              Alias: &ast.Ident{
                NamePos: 101,
                NameEnd: 104,
                Name:    "off",
              },
            },
          },
          Sample: (*ast.TableSample)(nil),
        },
        Cond: nil,
      },
    },
    Where:   (*ast.Where)(nil),
    GroupBy: (*ast.GroupBy)(nil),
    Having:  (*ast.Having)(nil),
    OrderBy: (*ast.OrderBy)(nil),
    Limit:   (*ast.Limit)(nil),
  },
}

--- SQL
SELECT a, off FROM UNNEST([STRUCT<arr ARRAY<STRING>>(["foo"])]) AS t, t.arr AS a WITH OFFSET AS off
