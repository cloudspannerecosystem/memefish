--- select_nest_complex.sql
select *
from (
    (((select 1 A union all (select 2)) union distinct (select 1)) limit 1)
  JOIN
    (select 1 A, 2 B) USING (A)
)

--- AST
&ast.QueryStatement{
  Hint:  (*ast.Hint)(nil),
  With:  (*ast.With)(nil),
  Query: &ast.Select{
    Select:   0,
    Distinct: false,
    AsStruct: false,
    Results:  []ast.SelectItem{
      &ast.Star{
        Star: 7,
      },
    },
    From: &ast.From{
      From:   9,
      Source: &ast.ParenTableExpr{
        Lparen: 14,
        Rparen: 131,
        Source: &ast.Join{
          Op:     "INNER JOIN",
          Method: "",
          Hint:   (*ast.Hint)(nil),
          Left:   &ast.SubQueryTableExpr{
            Lparen: 20,
            Rparen: 90,
            Query:  &ast.SubQuery{
              Lparen: 21,
              Rparen: 81,
              Query:  &ast.CompoundQuery{
                Op:       "UNION",
                Distinct: true,
                Queries:  []ast.QueryExpr{
                  &ast.SubQuery{
                    Lparen: 22,
                    Rparen: 54,
                    Query:  &ast.CompoundQuery{
                      Op:       "UNION",
                      Distinct: false,
                      Queries:  []ast.QueryExpr{
                        &ast.Select{
                          Select:   23,
                          Distinct: false,
                          AsStruct: false,
                          Results:  []ast.SelectItem{
                            &ast.Alias{
                              Expr: &ast.IntLiteral{
                                ValuePos: 30,
                                ValueEnd: 31,
                                Base:     10,
                                Value:    "1",
                              },
                              As: &ast.AsAlias{
                                As:    32,
                                Alias: &ast.Ident{
                                  NamePos: 32,
                                  NameEnd: 33,
                                  Name:    "A",
                                },
                              },
                            },
                          },
                          From:    (*ast.From)(nil),
                          Where:   (*ast.Where)(nil),
                          GroupBy: (*ast.GroupBy)(nil),
                          Having:  (*ast.Having)(nil),
                          OrderBy: (*ast.OrderBy)(nil),
                          Limit:   (*ast.Limit)(nil),
                        },
                        &ast.SubQuery{
                          Lparen: 44,
                          Rparen: 53,
                          Query:  &ast.Select{
                            Select:   45,
                            Distinct: false,
                            AsStruct: false,
                            Results:  []ast.SelectItem{
                              &ast.ExprSelectItem{
                                Expr: &ast.IntLiteral{
                                  ValuePos: 52,
                                  ValueEnd: 53,
                                  Base:     10,
                                  Value:    "2",
                                },
                              },
                            },
                            From:    (*ast.From)(nil),
                            Where:   (*ast.Where)(nil),
                            GroupBy: (*ast.GroupBy)(nil),
                            Having:  (*ast.Having)(nil),
                            OrderBy: (*ast.OrderBy)(nil),
                            Limit:   (*ast.Limit)(nil),
                          },
                          OrderBy: (*ast.OrderBy)(nil),
                          Limit:   (*ast.Limit)(nil),
                        },
                      },
                      OrderBy: (*ast.OrderBy)(nil),
                      Limit:   (*ast.Limit)(nil),
                    },
                    OrderBy: (*ast.OrderBy)(nil),
                    Limit:   (*ast.Limit)(nil),
                  },
                  &ast.SubQuery{
                    Lparen: 71,
                    Rparen: 80,
                    Query:  &ast.Select{
                      Select:   72,
                      Distinct: false,
                      AsStruct: false,
                      Results:  []ast.SelectItem{
                        &ast.ExprSelectItem{
                          Expr: &ast.IntLiteral{
                            ValuePos: 79,
                            ValueEnd: 80,
                            Base:     10,
                            Value:    "1",
                          },
                        },
                      },
                      From:    (*ast.From)(nil),
                      Where:   (*ast.Where)(nil),
                      GroupBy: (*ast.GroupBy)(nil),
                      Having:  (*ast.Having)(nil),
                      OrderBy: (*ast.OrderBy)(nil),
                      Limit:   (*ast.Limit)(nil),
                    },
                    OrderBy: (*ast.OrderBy)(nil),
                    Limit:   (*ast.Limit)(nil),
                  },
                },
                OrderBy: (*ast.OrderBy)(nil),
                Limit:   (*ast.Limit)(nil),
              },
              OrderBy: (*ast.OrderBy)(nil),
              Limit:   &ast.Limit{
                Limit: 83,
                Count: &ast.IntLiteral{
                  ValuePos: 89,
                  ValueEnd: 90,
                  Base:     10,
                  Value:    "1",
                },
                Offset: (*ast.Offset)(nil),
              },
            },
            As:     (*ast.AsAlias)(nil),
            Sample: (*ast.TableSample)(nil),
          },
          Right: &ast.SubQueryTableExpr{
            Lparen: 103,
            Rparen: 119,
            Query:  &ast.Select{
              Select:   104,
              Distinct: false,
              AsStruct: false,
              Results:  []ast.SelectItem{
                &ast.Alias{
                  Expr: &ast.IntLiteral{
                    ValuePos: 111,
                    ValueEnd: 112,
                    Base:     10,
                    Value:    "1",
                  },
                  As: &ast.AsAlias{
                    As:    113,
                    Alias: &ast.Ident{
                      NamePos: 113,
                      NameEnd: 114,
                      Name:    "A",
                    },
                  },
                },
                &ast.Alias{
                  Expr: &ast.IntLiteral{
                    ValuePos: 116,
                    ValueEnd: 117,
                    Base:     10,
                    Value:    "2",
                  },
                  As: &ast.AsAlias{
                    As:    118,
                    Alias: &ast.Ident{
                      NamePos: 118,
                      NameEnd: 119,
                      Name:    "B",
                    },
                  },
                },
              },
              From:    (*ast.From)(nil),
              Where:   (*ast.Where)(nil),
              GroupBy: (*ast.GroupBy)(nil),
              Having:  (*ast.Having)(nil),
              OrderBy: (*ast.OrderBy)(nil),
              Limit:   (*ast.Limit)(nil),
            },
            As:     (*ast.AsAlias)(nil),
            Sample: (*ast.TableSample)(nil),
          },
          Cond: &ast.Using{
            Using:  121,
            Rparen: 129,
            Idents: []*ast.Ident{
              &ast.Ident{
                NamePos: 128,
                NameEnd: 129,
                Name:    "A",
              },
            },
          },
        },
        Sample: (*ast.TableSample)(nil),
      },
    },
    Where:   (*ast.Where)(nil),
    GroupBy: (*ast.GroupBy)(nil),
    Having:  (*ast.Having)(nil),
    OrderBy: (*ast.OrderBy)(nil),
    Limit:   (*ast.Limit)(nil),
  },
}

--- SQL
SELECT * FROM ((((SELECT 1 AS A UNION ALL (SELECT 2)) UNION DISTINCT (SELECT 1)) LIMIT 1) INNER JOIN (SELECT 1 AS A, 2 AS B) USING (A))
