--- select_in_gql_subquery.sql
SELECT 'Dana' IN {
  GRAPH FinGraph
  MATCH (p:Person)-[o:Owns]->(a:Account)
  RETURN p.name
} AS results
--- AST
&ast.QueryStatement{
  Hint:  (*ast.Hint)(nil),
  With:  (*ast.With)(nil),
  Query: &ast.Select{
    Select:   0,
    Distinct: false,
    As:       nil,
    Results:  []ast.SelectItem{
      &ast.Alias{
        Expr: &ast.InExpr{
          Not:  false,
          Left: &ast.StringLiteral{
            ValuePos: 7,
            ValueEnd: 13,
            Value:    "Dana",
          },
          Right: &ast.GQLSubQueryInCondition{
            LBrace: 17,
            RBrace: 93,
            Query:  &ast.GQLQueryExpr{
              GraphClause: &ast.GQLGraphClause{
                Graph:             21,
                PropertyGraphName: &ast.Ident{
                  NamePos: 27,
                  NameEnd: 35,
                  Name:    "FinGraph",
                },
              },
              MultiLinearQueryStatement: &ast.GQLMultiLinearQueryStatement{
                LinearQueryStatementList: []ast.GQLLinearQueryStatement{
                  &ast.GQLSimpleLinearQueryStatement{
                    PrimitiveQueryStatementList: []ast.GQLPrimitiveQueryStatement{
                      &ast.GQLMatchStatement{
                        Optional:     -1,
                        Match:        38,
                        MatchHint:    (*ast.Hint)(nil),
                        PrefixOrMode: nil,
                        GraphPattern: &ast.GQLGraphPattern{
                          PathPatternList: []*ast.GQLTopLevelPathPattern{
                            &ast.GQLTopLevelPathPattern{
                              PathSearchPrefixOrPathMode: nil,
                              PathPattern:                &ast.GQLPathPattern{
                                PathTermList: []*ast.GQLQuantifiablePathTerm{
                                  &ast.GQLQuantifiablePathTerm{
                                    Hint:     (*ast.Hint)(nil),
                                    PathTerm: &ast.GQLNodePattern{
                                      LParen:        44,
                                      RParen:        53,
                                      PatternFiller: &ast.GQLPatternFiller{
                                        Hint:                 (*ast.Hint)(nil),
                                        GraphPatternVariable: &ast.Ident{
                                          NamePos: 45,
                                          NameEnd: 46,
                                          Name:    "p",
                                        },
                                        IsLabelCondition: &ast.GQLIsLabelCondition{
                                          IsOrColon:       46,
                                          LabelExpression: &ast.GQLLabelName{
                                            StartPos:  47,
                                            IsPercent: false,
                                            LabelName: &ast.Ident{
                                              NamePos: 47,
                                              NameEnd: 53,
                                              Name:    "Person",
                                            },
                                          },
                                        },
                                        Filter: nil,
                                      },
                                    },
                                    Quantifier: nil,
                                  },
                                  &ast.GQLQuantifiablePathTerm{
                                    Hint:     (*ast.Hint)(nil),
                                    PathTerm: &ast.GQLFullEdgeRight{
                                      Hyphen:        54,
                                      Gt:            63,
                                      PatternFiller: &ast.GQLPatternFiller{
                                        Hint:                 (*ast.Hint)(nil),
                                        GraphPatternVariable: &ast.Ident{
                                          NamePos: 56,
                                          NameEnd: 57,
                                          Name:    "o",
                                        },
                                        IsLabelCondition: &ast.GQLIsLabelCondition{
                                          IsOrColon:       57,
                                          LabelExpression: &ast.GQLLabelName{
                                            StartPos:  58,
                                            IsPercent: false,
                                            LabelName: &ast.Ident{
                                              NamePos: 58,
                                              NameEnd: 62,
                                              Name:    "Owns",
                                            },
                                          },
                                        },
                                        Filter: nil,
                                      },
                                    },
                                    Quantifier: nil,
                                  },
                                  &ast.GQLQuantifiablePathTerm{
                                    Hint:     (*ast.Hint)(nil),
                                    PathTerm: &ast.GQLNodePattern{
                                      LParen:        65,
                                      RParen:        75,
                                      PatternFiller: &ast.GQLPatternFiller{
                                        Hint:                 (*ast.Hint)(nil),
                                        GraphPatternVariable: &ast.Ident{
                                          NamePos: 66,
                                          NameEnd: 67,
                                          Name:    "a",
                                        },
                                        IsLabelCondition: &ast.GQLIsLabelCondition{
                                          IsOrColon:       67,
                                          LabelExpression: &ast.GQLLabelName{
                                            StartPos:  68,
                                            IsPercent: false,
                                            LabelName: &ast.Ident{
                                              NamePos: 68,
                                              NameEnd: 75,
                                              Name:    "Account",
                                            },
                                          },
                                        },
                                        Filter: nil,
                                      },
                                    },
                                    Quantifier: nil,
                                  },
                                },
                              },
                            },
                          },
                          WhereClause: (*ast.Where)(nil),
                        },
                      },
                      &ast.GQLReturnStatement{
                        Return:         79,
                        AllOrDistinct:  "",
                        ReturnItemList: []ast.GQLReturnItem{
                          &ast.ExprSelectItem{
                            Expr: &ast.Path{
                              Idents: []*ast.Ident{
                                &ast.Ident{
                                  NamePos: 86,
                                  NameEnd: 87,
                                  Name:    "p",
                                },
                                &ast.Ident{
                                  NamePos: 88,
                                  NameEnd: 92,
                                  Name:    "name",
                                },
                              },
                            },
                          },
                        },
                        GroupByClause:        (*ast.GroupBy)(nil),
                        OrderByClause:        (*ast.OrderBy)(nil),
                        LimitAndOffsetClause: nil,
                      },
                    },
                  },
                },
              },
            },
          },
        },
        As: &ast.AsAlias{
          As:    95,
          Alias: &ast.Ident{
            NamePos: 98,
            NameEnd: 105,
            Name:    "results",
          },
        },
      },
    },
    From:    (*ast.From)(nil),
    Where:   (*ast.Where)(nil),
    GroupBy: (*ast.GroupBy)(nil),
    Having:  (*ast.Having)(nil),
    OrderBy: (*ast.OrderBy)(nil),
    Limit:   (*ast.Limit)(nil),
  },
}

--- SQL
SELECT "Dana" IN {GRAPH FinGraph
MATCH (p:Person)-[o:Owns]->(a:Account)
RETURN p.name} AS results
