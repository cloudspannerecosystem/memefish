--- select_cast.sql
select cast(1 as INT64), cast((struct(), 1, [2, 3], ["4", "5"]) as struct<struct<>, x int64, y array<int64>, z array<string>>)
from x tablesample BERNOULLI (cast(0.1 as float64) percent),
     y tablesample BERNOULLI (cast(1 as int64) rows),
     z tablesample BERNOULLI (cast(@param as int64) rows)
limit cast(1 as INT64) offset cast(@foo as INT64)

--- AST
&ast.QueryStatement{
  Hint:  (*ast.Hint)(nil),
  With:  (*ast.With)(nil),
  Query: &ast.Select{
    Select:   0,
    Distinct: false,
    AsStruct: false,
    Results:  []ast.SelectItem{
      &ast.ExprSelectItem{
        Expr: &ast.CastExpr{
          Cast:   7,
          Rparen: 22,
          Expr:   &ast.IntLiteral{
            ValuePos: 12,
            ValueEnd: 13,
            Base:     10,
            Value:    "1",
          },
          Type: &ast.SimpleType{
            NamePos: 17,
            Name:    "INT64",
          },
        },
      },
      &ast.ExprSelectItem{
        Expr: &ast.CastExpr{
          Cast:   25,
          Rparen: 125,
          Expr:   &ast.StructLiteral{
            Struct: 0,
            Lparen: 30,
            Rparen: 62,
            Fields: []*ast.StructField(nil),
            Values: []ast.Expr{
              &ast.StructLiteral{
                Struct: 31,
                Lparen: 37,
                Rparen: 38,
                Fields: []*ast.StructField(nil),
                Values: []ast.Expr(nil),
              },
              &ast.IntLiteral{
                ValuePos: 41,
                ValueEnd: 42,
                Base:     10,
                Value:    "1",
              },
              &ast.ArrayLiteral{
                Array:  0,
                Lbrack: 44,
                Rbrack: 49,
                Type:   nil,
                Values: []ast.Expr{
                  &ast.IntLiteral{
                    ValuePos: 45,
                    ValueEnd: 46,
                    Base:     10,
                    Value:    "2",
                  },
                  &ast.IntLiteral{
                    ValuePos: 48,
                    ValueEnd: 49,
                    Base:     10,
                    Value:    "3",
                  },
                },
              },
              &ast.ArrayLiteral{
                Array:  0,
                Lbrack: 52,
                Rbrack: 61,
                Type:   nil,
                Values: []ast.Expr{
                  &ast.StringLiteral{
                    ValuePos: 53,
                    ValueEnd: 56,
                    Value:    "4",
                  },
                  &ast.StringLiteral{
                    ValuePos: 58,
                    ValueEnd: 61,
                    Value:    "5",
                  },
                },
              },
            },
          },
          Type: &ast.StructType{
            Struct: 67,
            Gt:     124,
            Fields: []*ast.StructField{
              &ast.StructField{
                Ident: (*ast.Ident)(nil),
                Type:  &ast.StructType{
                  Struct: 74,
                  Gt:     81,
                  Fields: []*ast.StructField{},
                },
              },
              &ast.StructField{
                Ident: &ast.Ident{
                  NamePos: 84,
                  NameEnd: 85,
                  Name:    "x",
                },
                Type: &ast.SimpleType{
                  NamePos: 86,
                  Name:    "INT64",
                },
              },
              &ast.StructField{
                Ident: &ast.Ident{
                  NamePos: 93,
                  NameEnd: 94,
                  Name:    "y",
                },
                Type: &ast.ArrayType{
                  Array: 95,
                  Gt:    106,
                  Item:  &ast.SimpleType{
                    NamePos: 101,
                    Name:    "INT64",
                  },
                },
              },
              &ast.StructField{
                Ident: &ast.Ident{
                  NamePos: 109,
                  NameEnd: 110,
                  Name:    "z",
                },
                Type: &ast.ArrayType{
                  Array: 111,
                  Gt:    123,
                  Item:  &ast.SimpleType{
                    NamePos: 117,
                    Name:    "STRING",
                  },
                },
              },
            },
          },
        },
      },
    },
    From: &ast.From{
      From:   127,
      Source: &ast.Join{
        Op:     ",",
        Method: "",
        Hint:   (*ast.Hint)(nil),
        Left:   &ast.Join{
          Op:     ",",
          Method: "",
          Hint:   (*ast.Hint)(nil),
          Left:   &ast.TableName{
            Table: &ast.Ident{
              NamePos: 132,
              NameEnd: 133,
              Name:    "x",
            },
            Hint:   (*ast.Hint)(nil),
            As:     (*ast.AsAlias)(nil),
            Sample: &ast.TableSample{
              TableSample: 134,
              Method:      "BERNOULLI",
              Size:        &ast.TableSampleSize{
                Lparen: 156,
                Rparen: 185,
                Value:  &ast.CastNumValue{
                  Cast:   157,
                  Rparen: 176,
                  Expr:   &ast.FloatLiteral{
                    ValuePos: 162,
                    ValueEnd: 165,
                    Value:    "0.1",
                  },
                  Type: "FLOAT64",
                },
                Unit: "PERCENT",
              },
            },
          },
          Right: &ast.TableName{
            Table: &ast.Ident{
              NamePos: 193,
              NameEnd: 194,
              Name:    "y",
            },
            Hint:   (*ast.Hint)(nil),
            As:     (*ast.AsAlias)(nil),
            Sample: &ast.TableSample{
              TableSample: 195,
              Method:      "BERNOULLI",
              Size:        &ast.TableSampleSize{
                Lparen: 217,
                Rparen: 239,
                Value:  &ast.CastNumValue{
                  Cast:   218,
                  Rparen: 233,
                  Expr:   &ast.IntLiteral{
                    ValuePos: 223,
                    ValueEnd: 224,
                    Base:     10,
                    Value:    "1",
                  },
                  Type: "INT64",
                },
                Unit: "ROWS",
              },
            },
          },
          Cond: nil,
        },
        Right: &ast.TableName{
          Table: &ast.Ident{
            NamePos: 247,
            NameEnd: 248,
            Name:    "z",
          },
          Hint:   (*ast.Hint)(nil),
          As:     (*ast.AsAlias)(nil),
          Sample: &ast.TableSample{
            TableSample: 249,
            Method:      "BERNOULLI",
            Size:        &ast.TableSampleSize{
              Lparen: 271,
              Rparen: 298,
              Value:  &ast.CastNumValue{
                Cast:   272,
                Rparen: 292,
                Expr:   &ast.Param{
                  Atmark: 277,
                  Name:   "param",
                },
                Type: "INT64",
              },
              Unit: "ROWS",
            },
          },
        },
        Cond: nil,
      },
    },
    Where:   (*ast.Where)(nil),
    GroupBy: (*ast.GroupBy)(nil),
    Having:  (*ast.Having)(nil),
    OrderBy: (*ast.OrderBy)(nil),
    Limit:   &ast.Limit{
      Limit: 300,
      Count: &ast.CastIntValue{
        Cast:   306,
        Rparen: 321,
        Expr:   &ast.IntLiteral{
          ValuePos: 311,
          ValueEnd: 312,
          Base:     10,
          Value:    "1",
        },
      },
      Offset: &ast.Offset{
        Offset: 323,
        Value:  &ast.CastIntValue{
          Cast:   330,
          Rparen: 348,
          Expr:   &ast.Param{
            Atmark: 335,
            Name:   "foo",
          },
        },
      },
    },
  },
}

--- SQL
SELECT CAST(1 AS INT64), CAST(STRUCT(STRUCT(), 1, ARRAY[2, 3], ARRAY["4", "5"]) AS STRUCT<STRUCT<>, x INT64, y ARRAY<INT64>, z ARRAY<STRING>>) FROM x TABLESAMPLE BERNOULLI (CAST(0.1 AS FLOAT64) PERCENT), y TABLESAMPLE BERNOULLI (CAST(1 AS INT64) ROWS), z TABLESAMPLE BERNOULLI (CAST(@param AS INT64) ROWS) LIMIT CAST(1 AS INT64) OFFSET CAST(@foo AS INT64)
