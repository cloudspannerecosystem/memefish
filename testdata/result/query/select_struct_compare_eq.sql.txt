--- select_struct_compare_eq.sql
SELECT ARRAY(
  SELECT
    *
  FROM
    (SELECT STRUCT<X INT64, Y INT64, Y INT64>(1, 2, 3)) AS S
  WHERE S = STRUCT(STRUCT(1, 2, 3))
)

--- AST
&ast.QueryStatement{
  Hint:  (*ast.Hint)(nil),
  With:  (*ast.With)(nil),
  Query: &ast.Select{
    Select:   0,
    Distinct: false,
    AsStruct: false,
    Results:  []ast.SelectItem{
      &ast.ExprSelectItem{
        Expr: &ast.ArraySubQuery{
          Array:  7,
          Rparen: 133,
          Query:  &ast.Select{
            Select:   16,
            Distinct: false,
            AsStruct: false,
            Results:  []ast.SelectItem{
              &ast.Star{
                Star: 27,
              },
            },
            From: &ast.From{
              From:   31,
              Source: &ast.SubQueryTableExpr{
                Lparen: 40,
                Rparen: 90,
                Query:  &ast.Select{
                  Select:   41,
                  Distinct: false,
                  AsStruct: false,
                  Results:  []ast.SelectItem{
                    &ast.ExprSelectItem{
                      Expr: &ast.StructLiteral{
                        Struct: 48,
                        Lparen: 81,
                        Rparen: 89,
                        Fields: []*ast.StructField{
                          &ast.StructField{
                            Ident: &ast.Ident{
                              NamePos: 55,
                              NameEnd: 56,
                              Name:    "X",
                            },
                            Type: &ast.SimpleType{
                              NamePos: 57,
                              Name:    "INT64",
                            },
                          },
                          &ast.StructField{
                            Ident: &ast.Ident{
                              NamePos: 64,
                              NameEnd: 65,
                              Name:    "Y",
                            },
                            Type: &ast.SimpleType{
                              NamePos: 66,
                              Name:    "INT64",
                            },
                          },
                          &ast.StructField{
                            Ident: &ast.Ident{
                              NamePos: 73,
                              NameEnd: 74,
                              Name:    "Y",
                            },
                            Type: &ast.SimpleType{
                              NamePos: 75,
                              Name:    "INT64",
                            },
                          },
                        },
                        Values: []ast.Expr{
                          &ast.IntLiteral{
                            ValuePos: 82,
                            ValueEnd: 83,
                            Base:     10,
                            Value:    "1",
                          },
                          &ast.IntLiteral{
                            ValuePos: 85,
                            ValueEnd: 86,
                            Base:     10,
                            Value:    "2",
                          },
                          &ast.IntLiteral{
                            ValuePos: 88,
                            ValueEnd: 89,
                            Base:     10,
                            Value:    "3",
                          },
                        },
                      },
                    },
                  },
                  From:    (*ast.From)(nil),
                  Where:   (*ast.Where)(nil),
                  GroupBy: (*ast.GroupBy)(nil),
                  Having:  (*ast.Having)(nil),
                  OrderBy: (*ast.OrderBy)(nil),
                  Limit:   (*ast.Limit)(nil),
                },
                As: &ast.AsAlias{
                  As:    -1,
                  Alias: &ast.Ident{
                    NamePos: 95,
                    NameEnd: 96,
                    Name:    "S",
                  },
                },
                Sample: (*ast.TableSample)(nil),
              },
            },
            Where: &ast.Where{
              Where: 99,
              Expr:  &ast.BinaryExpr{
                Op:   "=",
                Left: &ast.Ident{
                  NamePos: 105,
                  NameEnd: 106,
                  Name:    "S",
                },
                Right: &ast.StructLiteral{
                  Struct: 109,
                  Lparen: 115,
                  Rparen: 131,
                  Fields: []*ast.StructField(nil),
                  Values: []ast.Expr{
                    &ast.StructLiteral{
                      Struct: 116,
                      Lparen: 122,
                      Rparen: 130,
                      Fields: []*ast.StructField(nil),
                      Values: []ast.Expr{
                        &ast.IntLiteral{
                          ValuePos: 123,
                          ValueEnd: 124,
                          Base:     10,
                          Value:    "1",
                        },
                        &ast.IntLiteral{
                          ValuePos: 126,
                          ValueEnd: 127,
                          Base:     10,
                          Value:    "2",
                        },
                        &ast.IntLiteral{
                          ValuePos: 129,
                          ValueEnd: 130,
                          Base:     10,
                          Value:    "3",
                        },
                      },
                    },
                  },
                },
              },
            },
            GroupBy: (*ast.GroupBy)(nil),
            Having:  (*ast.Having)(nil),
            OrderBy: (*ast.OrderBy)(nil),
            Limit:   (*ast.Limit)(nil),
          },
        },
      },
    },
    From:    (*ast.From)(nil),
    Where:   (*ast.Where)(nil),
    GroupBy: (*ast.GroupBy)(nil),
    Having:  (*ast.Having)(nil),
    OrderBy: (*ast.OrderBy)(nil),
    Limit:   (*ast.Limit)(nil),
  },
}

--- SQL
SELECT ARRAY(SELECT * FROM (SELECT STRUCT<X INT64, Y INT64, Y INT64>(1, 2, 3)) AS S WHERE S = STRUCT(STRUCT(1, 2, 3)))
