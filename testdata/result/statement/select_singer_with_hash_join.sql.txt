--- select_singer_with_hash_join.sql
SELECT
  *
FROM
  Singers A
  HASH JOIN
  Singers B
  ON A.SingerID = B.SingerID
  APPLY JOIN
  Singer C
  ON B.SingerID = C.SingerID
  LOOP JOIN
  Singer D
  ON C.SingerID = D.SingerID

--- AST
&ast.QueryStatement{
  Hint:  (*ast.Hint)(nil),
  With:  (*ast.With)(nil),
  Query: &ast.Select{
    Select:   0,
    Distinct: false,
    AsStruct: false,
    Results:  []ast.SelectItem{
      &ast.Star{
        Star: 9,
      },
    },
    From: &ast.From{
      From:   11,
      Source: &ast.Join{
        Op:     "INNER JOIN",
        Method: "LOOP",
        Hint:   (*ast.Hint)(nil),
        Left:   &ast.Join{
          Op:     "INNER JOIN",
          Method: "APPLY",
          Hint:   (*ast.Hint)(nil),
          Left:   &ast.Join{
            Op:     "INNER JOIN",
            Method: "HASH",
            Hint:   (*ast.Hint)(nil),
            Left:   &ast.TableName{
              Table: &ast.Ident{
                NamePos: 18,
                NameEnd: 25,
                Name:    "Singers",
              },
              Hint: (*ast.Hint)(nil),
              As:   &ast.AsAlias{
                As:    26,
                Alias: &ast.Ident{
                  NamePos: 26,
                  NameEnd: 27,
                  Name:    "A",
                },
              },
              Sample: (*ast.TableSample)(nil),
            },
            Right: &ast.TableName{
              Table: &ast.Ident{
                NamePos: 42,
                NameEnd: 49,
                Name:    "Singers",
              },
              Hint: (*ast.Hint)(nil),
              As:   &ast.AsAlias{
                As:    50,
                Alias: &ast.Ident{
                  NamePos: 50,
                  NameEnd: 51,
                  Name:    "B",
                },
              },
              Sample: (*ast.TableSample)(nil),
            },
            Cond: &ast.On{
              On:   54,
              Expr: &ast.BinaryExpr{
                Op:   "=",
                Left: &ast.Path{
                  Idents: []*ast.Ident{
                    &ast.Ident{
                      NamePos: 57,
                      NameEnd: 58,
                      Name:    "A",
                    },
                    &ast.Ident{
                      NamePos: 59,
                      NameEnd: 67,
                      Name:    "SingerID",
                    },
                  },
                },
                Right: &ast.Path{
                  Idents: []*ast.Ident{
                    &ast.Ident{
                      NamePos: 70,
                      NameEnd: 71,
                      Name:    "B",
                    },
                    &ast.Ident{
                      NamePos: 72,
                      NameEnd: 80,
                      Name:    "SingerID",
                    },
                  },
                },
              },
            },
          },
          Right: &ast.TableName{
            Table: &ast.Ident{
              NamePos: 96,
              NameEnd: 102,
              Name:    "Singer",
            },
            Hint: (*ast.Hint)(nil),
            As:   &ast.AsAlias{
              As:    103,
              Alias: &ast.Ident{
                NamePos: 103,
                NameEnd: 104,
                Name:    "C",
              },
            },
            Sample: (*ast.TableSample)(nil),
          },
          Cond: &ast.On{
            On:   107,
            Expr: &ast.BinaryExpr{
              Op:   "=",
              Left: &ast.Path{
                Idents: []*ast.Ident{
                  &ast.Ident{
                    NamePos: 110,
                    NameEnd: 111,
                    Name:    "B",
                  },
                  &ast.Ident{
                    NamePos: 112,
                    NameEnd: 120,
                    Name:    "SingerID",
                  },
                },
              },
              Right: &ast.Path{
                Idents: []*ast.Ident{
                  &ast.Ident{
                    NamePos: 123,
                    NameEnd: 124,
                    Name:    "C",
                  },
                  &ast.Ident{
                    NamePos: 125,
                    NameEnd: 133,
                    Name:    "SingerID",
                  },
                },
              },
            },
          },
        },
        Right: &ast.TableName{
          Table: &ast.Ident{
            NamePos: 148,
            NameEnd: 154,
            Name:    "Singer",
          },
          Hint: (*ast.Hint)(nil),
          As:   &ast.AsAlias{
            As:    155,
            Alias: &ast.Ident{
              NamePos: 155,
              NameEnd: 156,
              Name:    "D",
            },
          },
          Sample: (*ast.TableSample)(nil),
        },
        Cond: &ast.On{
          On:   159,
          Expr: &ast.BinaryExpr{
            Op:   "=",
            Left: &ast.Path{
              Idents: []*ast.Ident{
                &ast.Ident{
                  NamePos: 162,
                  NameEnd: 163,
                  Name:    "C",
                },
                &ast.Ident{
                  NamePos: 164,
                  NameEnd: 172,
                  Name:    "SingerID",
                },
              },
            },
            Right: &ast.Path{
              Idents: []*ast.Ident{
                &ast.Ident{
                  NamePos: 175,
                  NameEnd: 176,
                  Name:    "D",
                },
                &ast.Ident{
                  NamePos: 177,
                  NameEnd: 185,
                  Name:    "SingerID",
                },
              },
            },
          },
        },
      },
    },
    Where:   (*ast.Where)(nil),
    GroupBy: (*ast.GroupBy)(nil),
    Having:  (*ast.Having)(nil),
    OrderBy: (*ast.OrderBy)(nil),
    Limit:   (*ast.Limit)(nil),
  },
}

--- SQL
SELECT * FROM Singers AS A INNER JOIN Singers AS B ON A.SingerID = B.SingerID INNER JOIN Singer AS C ON B.SingerID = C.SingerID INNER JOIN Singer AS D ON C.SingerID = D.SingerID
