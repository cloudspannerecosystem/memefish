--- select_literals_struct.sql
SELECT
  ARRAY(SELECT STRUCT(1, 2, 3)),
  ARRAY(SELECT STRUCT(1, 2, TRUE)),
  ARRAY(SELECT STRUCT<X INT64, Y INT64, Z INT64>(1, 2, 3)),
  ARRAY(SELECT STRUCT<INT64, INT64, INT64>(1, 2, 3)),
  ARRAY(SELECT STRUCT<X INT64, INT64, INT64>(1, 2, 3)),
  ARRAY(SELECT (1, 2, 3)),
  ARRAY(SELECT STRUCT<>()),
  EXISTS(SELECT (1, 2))

--- AST
&ast.QueryStatement{
  Hint:  (*ast.Hint)(nil),
  With:  (*ast.With)(nil),
  Query: &ast.Select{
    Select:   0,
    Distinct: false,
    AsStruct: false,
    Results:  []ast.SelectItem{
      &ast.ExprSelectItem{
        Expr: &ast.ArraySubQuery{
          Array:  9,
          Rparen: 37,
          Query:  &ast.Select{
            Select:   15,
            Distinct: false,
            AsStruct: false,
            Results:  []ast.SelectItem{
              &ast.ExprSelectItem{
                Expr: &ast.StructLiteral{
                  Struct: 22,
                  Lparen: 28,
                  Rparen: 36,
                  Fields: []*ast.StructField(nil),
                  Values: []ast.Expr{
                    &ast.IntLiteral{
                      ValuePos: 29,
                      ValueEnd: 30,
                      Base:     10,
                      Value:    "1",
                    },
                    &ast.IntLiteral{
                      ValuePos: 32,
                      ValueEnd: 33,
                      Base:     10,
                      Value:    "2",
                    },
                    &ast.IntLiteral{
                      ValuePos: 35,
                      ValueEnd: 36,
                      Base:     10,
                      Value:    "3",
                    },
                  },
                },
              },
            },
            From:    (*ast.From)(nil),
            Where:   (*ast.Where)(nil),
            GroupBy: (*ast.GroupBy)(nil),
            Having:  (*ast.Having)(nil),
            OrderBy: (*ast.OrderBy)(nil),
            Limit:   (*ast.Limit)(nil),
          },
        },
      },
      &ast.ExprSelectItem{
        Expr: &ast.ArraySubQuery{
          Array:  42,
          Rparen: 73,
          Query:  &ast.Select{
            Select:   48,
            Distinct: false,
            AsStruct: false,
            Results:  []ast.SelectItem{
              &ast.ExprSelectItem{
                Expr: &ast.StructLiteral{
                  Struct: 55,
                  Lparen: 61,
                  Rparen: 72,
                  Fields: []*ast.StructField(nil),
                  Values: []ast.Expr{
                    &ast.IntLiteral{
                      ValuePos: 62,
                      ValueEnd: 63,
                      Base:     10,
                      Value:    "1",
                    },
                    &ast.IntLiteral{
                      ValuePos: 65,
                      ValueEnd: 66,
                      Base:     10,
                      Value:    "2",
                    },
                    &ast.BoolLiteral{
                      ValuePos: 68,
                      Value:    true,
                    },
                  },
                },
              },
            },
            From:    (*ast.From)(nil),
            Where:   (*ast.Where)(nil),
            GroupBy: (*ast.GroupBy)(nil),
            Having:  (*ast.Having)(nil),
            OrderBy: (*ast.OrderBy)(nil),
            Limit:   (*ast.Limit)(nil),
          },
        },
      },
      &ast.ExprSelectItem{
        Expr: &ast.ArraySubQuery{
          Array:  78,
          Rparen: 133,
          Query:  &ast.Select{
            Select:   84,
            Distinct: false,
            AsStruct: false,
            Results:  []ast.SelectItem{
              &ast.ExprSelectItem{
                Expr: &ast.StructLiteral{
                  Struct: 91,
                  Lparen: 124,
                  Rparen: 132,
                  Fields: []*ast.StructField{
                    &ast.StructField{
                      Ident: &ast.Ident{
                        NamePos: 98,
                        NameEnd: 99,
                        Name:    "X",
                      },
                      Type: &ast.SimpleType{
                        NamePos: 100,
                        Name:    "INT64",
                      },
                    },
                    &ast.StructField{
                      Ident: &ast.Ident{
                        NamePos: 107,
                        NameEnd: 108,
                        Name:    "Y",
                      },
                      Type: &ast.SimpleType{
                        NamePos: 109,
                        Name:    "INT64",
                      },
                    },
                    &ast.StructField{
                      Ident: &ast.Ident{
                        NamePos: 116,
                        NameEnd: 117,
                        Name:    "Z",
                      },
                      Type: &ast.SimpleType{
                        NamePos: 118,
                        Name:    "INT64",
                      },
                    },
                  },
                  Values: []ast.Expr{
                    &ast.IntLiteral{
                      ValuePos: 125,
                      ValueEnd: 126,
                      Base:     10,
                      Value:    "1",
                    },
                    &ast.IntLiteral{
                      ValuePos: 128,
                      ValueEnd: 129,
                      Base:     10,
                      Value:    "2",
                    },
                    &ast.IntLiteral{
                      ValuePos: 131,
                      ValueEnd: 132,
                      Base:     10,
                      Value:    "3",
                    },
                  },
                },
              },
            },
            From:    (*ast.From)(nil),
            Where:   (*ast.Where)(nil),
            GroupBy: (*ast.GroupBy)(nil),
            Having:  (*ast.Having)(nil),
            OrderBy: (*ast.OrderBy)(nil),
            Limit:   (*ast.Limit)(nil),
          },
        },
      },
      &ast.ExprSelectItem{
        Expr: &ast.ArraySubQuery{
          Array:  138,
          Rparen: 187,
          Query:  &ast.Select{
            Select:   144,
            Distinct: false,
            AsStruct: false,
            Results:  []ast.SelectItem{
              &ast.ExprSelectItem{
                Expr: &ast.StructLiteral{
                  Struct: 151,
                  Lparen: 178,
                  Rparen: 186,
                  Fields: []*ast.StructField{
                    &ast.StructField{
                      Ident: (*ast.Ident)(nil),
                      Type:  &ast.SimpleType{
                        NamePos: 158,
                        Name:    "INT64",
                      },
                    },
                    &ast.StructField{
                      Ident: (*ast.Ident)(nil),
                      Type:  &ast.SimpleType{
                        NamePos: 165,
                        Name:    "INT64",
                      },
                    },
                    &ast.StructField{
                      Ident: (*ast.Ident)(nil),
                      Type:  &ast.SimpleType{
                        NamePos: 172,
                        Name:    "INT64",
                      },
                    },
                  },
                  Values: []ast.Expr{
                    &ast.IntLiteral{
                      ValuePos: 179,
                      ValueEnd: 180,
                      Base:     10,
                      Value:    "1",
                    },
                    &ast.IntLiteral{
                      ValuePos: 182,
                      ValueEnd: 183,
                      Base:     10,
                      Value:    "2",
                    },
                    &ast.IntLiteral{
                      ValuePos: 185,
                      ValueEnd: 186,
                      Base:     10,
                      Value:    "3",
                    },
                  },
                },
              },
            },
            From:    (*ast.From)(nil),
            Where:   (*ast.Where)(nil),
            GroupBy: (*ast.GroupBy)(nil),
            Having:  (*ast.Having)(nil),
            OrderBy: (*ast.OrderBy)(nil),
            Limit:   (*ast.Limit)(nil),
          },
        },
      },
      &ast.ExprSelectItem{
        Expr: &ast.ArraySubQuery{
          Array:  192,
          Rparen: 243,
          Query:  &ast.Select{
            Select:   198,
            Distinct: false,
            AsStruct: false,
            Results:  []ast.SelectItem{
              &ast.ExprSelectItem{
                Expr: &ast.StructLiteral{
                  Struct: 205,
                  Lparen: 234,
                  Rparen: 242,
                  Fields: []*ast.StructField{
                    &ast.StructField{
                      Ident: &ast.Ident{
                        NamePos: 212,
                        NameEnd: 213,
                        Name:    "X",
                      },
                      Type: &ast.SimpleType{
                        NamePos: 214,
                        Name:    "INT64",
                      },
                    },
                    &ast.StructField{
                      Ident: (*ast.Ident)(nil),
                      Type:  &ast.SimpleType{
                        NamePos: 221,
                        Name:    "INT64",
                      },
                    },
                    &ast.StructField{
                      Ident: (*ast.Ident)(nil),
                      Type:  &ast.SimpleType{
                        NamePos: 228,
                        Name:    "INT64",
                      },
                    },
                  },
                  Values: []ast.Expr{
                    &ast.IntLiteral{
                      ValuePos: 235,
                      ValueEnd: 236,
                      Base:     10,
                      Value:    "1",
                    },
                    &ast.IntLiteral{
                      ValuePos: 238,
                      ValueEnd: 239,
                      Base:     10,
                      Value:    "2",
                    },
                    &ast.IntLiteral{
                      ValuePos: 241,
                      ValueEnd: 242,
                      Base:     10,
                      Value:    "3",
                    },
                  },
                },
              },
            },
            From:    (*ast.From)(nil),
            Where:   (*ast.Where)(nil),
            GroupBy: (*ast.GroupBy)(nil),
            Having:  (*ast.Having)(nil),
            OrderBy: (*ast.OrderBy)(nil),
            Limit:   (*ast.Limit)(nil),
          },
        },
      },
      &ast.ExprSelectItem{
        Expr: &ast.ArraySubQuery{
          Array:  248,
          Rparen: 270,
          Query:  &ast.Select{
            Select:   254,
            Distinct: false,
            AsStruct: false,
            Results:  []ast.SelectItem{
              &ast.ExprSelectItem{
                Expr: &ast.StructLiteral{
                  Struct: 0,
                  Lparen: 261,
                  Rparen: 269,
                  Fields: []*ast.StructField(nil),
                  Values: []ast.Expr{
                    &ast.IntLiteral{
                      ValuePos: 262,
                      ValueEnd: 263,
                      Base:     10,
                      Value:    "1",
                    },
                    &ast.IntLiteral{
                      ValuePos: 265,
                      ValueEnd: 266,
                      Base:     10,
                      Value:    "2",
                    },
                    &ast.IntLiteral{
                      ValuePos: 268,
                      ValueEnd: 269,
                      Base:     10,
                      Value:    "3",
                    },
                  },
                },
              },
            },
            From:    (*ast.From)(nil),
            Where:   (*ast.Where)(nil),
            GroupBy: (*ast.GroupBy)(nil),
            Having:  (*ast.Having)(nil),
            OrderBy: (*ast.OrderBy)(nil),
            Limit:   (*ast.Limit)(nil),
          },
        },
      },
      &ast.ExprSelectItem{
        Expr: &ast.ArraySubQuery{
          Array:  275,
          Rparen: 298,
          Query:  &ast.Select{
            Select:   281,
            Distinct: false,
            AsStruct: false,
            Results:  []ast.SelectItem{
              &ast.ExprSelectItem{
                Expr: &ast.StructLiteral{
                  Struct: 288,
                  Lparen: 296,
                  Rparen: 297,
                  Fields: []*ast.StructField{},
                  Values: []ast.Expr(nil),
                },
              },
            },
            From:    (*ast.From)(nil),
            Where:   (*ast.Where)(nil),
            GroupBy: (*ast.GroupBy)(nil),
            Having:  (*ast.Having)(nil),
            OrderBy: (*ast.OrderBy)(nil),
            Limit:   (*ast.Limit)(nil),
          },
        },
      },
      &ast.ExprSelectItem{
        Expr: &ast.ExistsSubQuery{
          Exists: 303,
          Rparen: 323,
          Hint:   (*ast.Hint)(nil),
          Query:  &ast.Select{
            Select:   310,
            Distinct: false,
            AsStruct: false,
            Results:  []ast.SelectItem{
              &ast.ExprSelectItem{
                Expr: &ast.StructLiteral{
                  Struct: 0,
                  Lparen: 317,
                  Rparen: 322,
                  Fields: []*ast.StructField(nil),
                  Values: []ast.Expr{
                    &ast.IntLiteral{
                      ValuePos: 318,
                      ValueEnd: 319,
                      Base:     10,
                      Value:    "1",
                    },
                    &ast.IntLiteral{
                      ValuePos: 321,
                      ValueEnd: 322,
                      Base:     10,
                      Value:    "2",
                    },
                  },
                },
              },
            },
            From:    (*ast.From)(nil),
            Where:   (*ast.Where)(nil),
            GroupBy: (*ast.GroupBy)(nil),
            Having:  (*ast.Having)(nil),
            OrderBy: (*ast.OrderBy)(nil),
            Limit:   (*ast.Limit)(nil),
          },
        },
      },
    },
    From:    (*ast.From)(nil),
    Where:   (*ast.Where)(nil),
    GroupBy: (*ast.GroupBy)(nil),
    Having:  (*ast.Having)(nil),
    OrderBy: (*ast.OrderBy)(nil),
    Limit:   (*ast.Limit)(nil),
  },
}

--- SQL
SELECT ARRAY(SELECT STRUCT(1, 2, 3)), ARRAY(SELECT STRUCT(1, 2, TRUE)), ARRAY(SELECT STRUCT<X INT64, Y INT64, Z INT64>(1, 2, 3)), ARRAY(SELECT STRUCT<INT64, INT64, INT64>(1, 2, 3)), ARRAY(SELECT STRUCT<X INT64, INT64, INT64>(1, 2, 3)), ARRAY(SELECT STRUCT(1, 2, 3)), ARRAY(SELECT STRUCT<>()), EXISTS(SELECT STRUCT(1, 2))
