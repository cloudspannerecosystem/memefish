--- select_singer_with_where_and_comparison.sql
SELECT
  *
FROM
  Singers
WHERE
  SingerID = 1
  OR SingerID < 1
  OR SingerID > 1
  OR SingerID <= 1
  OR SingerID >= 1
  OR SingerID != 1
  OR SingerID IN (1, 2, 3)
  OR SingerID NOT IN (1, 2, 3)
  OR SingerID BETWEEN 1 AND 3
  OR SingerID NOT BETWEEN 1 AND 3
  OR FirstName LIKE "%a"
  OR FirstName NOT LIKE "%a"
  OR NULL IS NULL
  OR NULL IS NOT NULL
  OR (SingerID = 1) IS TRUE
  OR (SingerID = 1) IS NOT TRUE
  OR (SingerID = 1) IS FALSE
  OR (SingerID = 1) IS NOT FALSE

--- AST
&ast.QueryStatement{
  Hint:  (*ast.Hint)(nil),
  With:  (*ast.With)(nil),
  Query: &ast.Select{
    Select:   0,
    Distinct: false,
    As:       nil,
    Results:  []ast.SelectItem{
      &ast.Star{
        Star: 9,
      },
    },
    From: &ast.From{
      From:   11,
      Source: &ast.TableName{
        Table: &ast.Ident{
          NamePos: 18,
          NameEnd: 25,
          Name:    "Singers",
        },
        Hint:   (*ast.Hint)(nil),
        As:     (*ast.AsAlias)(nil),
        Sample: (*ast.TableSample)(nil),
      },
    },
    Where: &ast.Where{
      Where: 26,
      Expr:  &ast.BinaryExpr{
        Op:   "OR",
        Left: &ast.BinaryExpr{
          Op:   "OR",
          Left: &ast.BinaryExpr{
            Op:   "OR",
            Left: &ast.BinaryExpr{
              Op:   "OR",
              Left: &ast.BinaryExpr{
                Op:   "OR",
                Left: &ast.BinaryExpr{
                  Op:   "OR",
                  Left: &ast.BinaryExpr{
                    Op:   "OR",
                    Left: &ast.BinaryExpr{
                      Op:   "OR",
                      Left: &ast.BinaryExpr{
                        Op:   "OR",
                        Left: &ast.BinaryExpr{
                          Op:   "OR",
                          Left: &ast.BinaryExpr{
                            Op:   "OR",
                            Left: &ast.BinaryExpr{
                              Op:   "OR",
                              Left: &ast.BinaryExpr{
                                Op:   "OR",
                                Left: &ast.BinaryExpr{
                                  Op:   "OR",
                                  Left: &ast.BinaryExpr{
                                    Op:   "OR",
                                    Left: &ast.BinaryExpr{
                                      Op:   "OR",
                                      Left: &ast.BinaryExpr{
                                        Op:   "OR",
                                        Left: &ast.BinaryExpr{
                                          Op:   "=",
                                          Left: &ast.Ident{
                                            NamePos: 34,
                                            NameEnd: 42,
                                            Name:    "SingerID",
                                          },
                                          Right: &ast.IntLiteral{
                                            ValuePos: 45,
                                            ValueEnd: 46,
                                            Base:     10,
                                            Value:    "1",
                                          },
                                        },
                                        Right: &ast.BinaryExpr{
                                          Op:   "<",
                                          Left: &ast.Ident{
                                            NamePos: 52,
                                            NameEnd: 60,
                                            Name:    "SingerID",
                                          },
                                          Right: &ast.IntLiteral{
                                            ValuePos: 63,
                                            ValueEnd: 64,
                                            Base:     10,
                                            Value:    "1",
                                          },
                                        },
                                      },
                                      Right: &ast.BinaryExpr{
                                        Op:   ">",
                                        Left: &ast.Ident{
                                          NamePos: 70,
                                          NameEnd: 78,
                                          Name:    "SingerID",
                                        },
                                        Right: &ast.IntLiteral{
                                          ValuePos: 81,
                                          ValueEnd: 82,
                                          Base:     10,
                                          Value:    "1",
                                        },
                                      },
                                    },
                                    Right: &ast.BinaryExpr{
                                      Op:   "<=",
                                      Left: &ast.Ident{
                                        NamePos: 88,
                                        NameEnd: 96,
                                        Name:    "SingerID",
                                      },
                                      Right: &ast.IntLiteral{
                                        ValuePos: 100,
                                        ValueEnd: 101,
                                        Base:     10,
                                        Value:    "1",
                                      },
                                    },
                                  },
                                  Right: &ast.BinaryExpr{
                                    Op:   ">=",
                                    Left: &ast.Ident{
                                      NamePos: 107,
                                      NameEnd: 115,
                                      Name:    "SingerID",
                                    },
                                    Right: &ast.IntLiteral{
                                      ValuePos: 119,
                                      ValueEnd: 120,
                                      Base:     10,
                                      Value:    "1",
                                    },
                                  },
                                },
                                Right: &ast.BinaryExpr{
                                  Op:   "!=",
                                  Left: &ast.Ident{
                                    NamePos: 126,
                                    NameEnd: 134,
                                    Name:    "SingerID",
                                  },
                                  Right: &ast.IntLiteral{
                                    ValuePos: 138,
                                    ValueEnd: 139,
                                    Base:     10,
                                    Value:    "1",
                                  },
                                },
                              },
                              Right: &ast.InExpr{
                                Not:  false,
                                Left: &ast.Ident{
                                  NamePos: 145,
                                  NameEnd: 153,
                                  Name:    "SingerID",
                                },
                                Right: &ast.ValuesInCondition{
                                  Lparen: 157,
                                  Rparen: 165,
                                  Exprs:  []ast.Expr{
                                    &ast.IntLiteral{
                                      ValuePos: 158,
                                      ValueEnd: 159,
                                      Base:     10,
                                      Value:    "1",
                                    },
                                    &ast.IntLiteral{
                                      ValuePos: 161,
                                      ValueEnd: 162,
                                      Base:     10,
                                      Value:    "2",
                                    },
                                    &ast.IntLiteral{
                                      ValuePos: 164,
                                      ValueEnd: 165,
                                      Base:     10,
                                      Value:    "3",
                                    },
                                  },
                                },
                              },
                            },
                            Right: &ast.InExpr{
                              Not:  true,
                              Left: &ast.Ident{
                                NamePos: 172,
                                NameEnd: 180,
                                Name:    "SingerID",
                              },
                              Right: &ast.ValuesInCondition{
                                Lparen: 188,
                                Rparen: 196,
                                Exprs:  []ast.Expr{
                                  &ast.IntLiteral{
                                    ValuePos: 189,
                                    ValueEnd: 190,
                                    Base:     10,
                                    Value:    "1",
                                  },
                                  &ast.IntLiteral{
                                    ValuePos: 192,
                                    ValueEnd: 193,
                                    Base:     10,
                                    Value:    "2",
                                  },
                                  &ast.IntLiteral{
                                    ValuePos: 195,
                                    ValueEnd: 196,
                                    Base:     10,
                                    Value:    "3",
                                  },
                                },
                              },
                            },
                          },
                          Right: &ast.BetweenExpr{
                            Not:  false,
                            Left: &ast.Ident{
                              NamePos: 203,
                              NameEnd: 211,
                              Name:    "SingerID",
                            },
                            RightStart: &ast.IntLiteral{
                              ValuePos: 220,
                              ValueEnd: 221,
                              Base:     10,
                              Value:    "1",
                            },
                            RightEnd: &ast.IntLiteral{
                              ValuePos: 226,
                              ValueEnd: 227,
                              Base:     10,
                              Value:    "3",
                            },
                          },
                        },
                        Right: &ast.BetweenExpr{
                          Not:  true,
                          Left: &ast.Ident{
                            NamePos: 233,
                            NameEnd: 241,
                            Name:    "SingerID",
                          },
                          RightStart: &ast.IntLiteral{
                            ValuePos: 254,
                            ValueEnd: 255,
                            Base:     10,
                            Value:    "1",
                          },
                          RightEnd: &ast.IntLiteral{
                            ValuePos: 260,
                            ValueEnd: 261,
                            Base:     10,
                            Value:    "3",
                          },
                        },
                      },
                      Right: &ast.BinaryExpr{
                        Op:   "LIKE",
                        Left: &ast.Ident{
                          NamePos: 267,
                          NameEnd: 276,
                          Name:    "FirstName",
                        },
                        Right: &ast.StringLiteral{
                          ValuePos: 282,
                          ValueEnd: 286,
                          Value:    "%a",
                        },
                      },
                    },
                    Right: &ast.BinaryExpr{
                      Op:   "NOT LIKE",
                      Left: &ast.Ident{
                        NamePos: 292,
                        NameEnd: 301,
                        Name:    "FirstName",
                      },
                      Right: &ast.StringLiteral{
                        ValuePos: 311,
                        ValueEnd: 315,
                        Value:    "%a",
                      },
                    },
                  },
                  Right: &ast.IsNullExpr{
                    Null: 329,
                    Not:  false,
                    Left: &ast.NullLiteral{
                      Null: 321,
                    },
                  },
                },
                Right: &ast.IsNullExpr{
                  Null: 351,
                  Not:  true,
                  Left: &ast.NullLiteral{
                    Null: 339,
                  },
                },
              },
              Right: &ast.IsBoolExpr{
                RightPos: 379,
                Not:      false,
                Left:     &ast.ParenExpr{
                  Lparen: 361,
                  Rparen: 374,
                  Expr:   &ast.BinaryExpr{
                    Op:   "=",
                    Left: &ast.Ident{
                      NamePos: 362,
                      NameEnd: 370,
                      Name:    "SingerID",
                    },
                    Right: &ast.IntLiteral{
                      ValuePos: 373,
                      ValueEnd: 374,
                      Base:     10,
                      Value:    "1",
                    },
                  },
                },
                Right: true,
              },
            },
            Right: &ast.IsBoolExpr{
              RightPos: 411,
              Not:      true,
              Left:     &ast.ParenExpr{
                Lparen: 389,
                Rparen: 402,
                Expr:   &ast.BinaryExpr{
                  Op:   "=",
                  Left: &ast.Ident{
                    NamePos: 390,
                    NameEnd: 398,
                    Name:    "SingerID",
                  },
                  Right: &ast.IntLiteral{
                    ValuePos: 401,
                    ValueEnd: 402,
                    Base:     10,
                    Value:    "1",
                  },
                },
              },
              Right: true,
            },
          },
          Right: &ast.IsBoolExpr{
            RightPos: 439,
            Not:      false,
            Left:     &ast.ParenExpr{
              Lparen: 421,
              Rparen: 434,
              Expr:   &ast.BinaryExpr{
                Op:   "=",
                Left: &ast.Ident{
                  NamePos: 422,
                  NameEnd: 430,
                  Name:    "SingerID",
                },
                Right: &ast.IntLiteral{
                  ValuePos: 433,
                  ValueEnd: 434,
                  Base:     10,
                  Value:    "1",
                },
              },
            },
            Right: false,
          },
        },
        Right: &ast.IsBoolExpr{
          RightPos: 472,
          Not:      true,
          Left:     &ast.ParenExpr{
            Lparen: 450,
            Rparen: 463,
            Expr:   &ast.BinaryExpr{
              Op:   "=",
              Left: &ast.Ident{
                NamePos: 451,
                NameEnd: 459,
                Name:    "SingerID",
              },
              Right: &ast.IntLiteral{
                ValuePos: 462,
                ValueEnd: 463,
                Base:     10,
                Value:    "1",
              },
            },
          },
          Right: false,
        },
      },
    },
    GroupBy: (*ast.GroupBy)(nil),
    Having:  (*ast.Having)(nil),
    OrderBy: (*ast.OrderBy)(nil),
    Limit:   (*ast.Limit)(nil),
  },
}

--- SQL
SELECT * FROM Singers WHERE SingerID = 1 OR SingerID < 1 OR SingerID > 1 OR SingerID <= 1 OR SingerID >= 1 OR SingerID != 1 OR SingerID IN (1, 2, 3) OR SingerID NOT IN (1, 2, 3) OR SingerID BETWEEN 1 AND 3 OR SingerID NOT BETWEEN 1 AND 3 OR FirstName LIKE "%a" OR FirstName NOT LIKE "%a" OR NULL IS NULL OR NULL IS NOT NULL OR (SingerID = 1) IS TRUE OR (SingerID = 1) IS NOT TRUE OR (SingerID = 1) IS FALSE OR (SingerID = 1) IS NOT FALSE
