--- select_singer_with_join_twice.sql
SELECT
  *
FROM
  Singers A
  JOIN
  Singers B
  ON A.SingerID = B.SingerID
  INNER JOIN
  Singers C
  ON A.SingerID = C.SingerID

--- AST
&ast.QueryStatement{
  Hint:  (*ast.Hint)(nil),
  With:  (*ast.With)(nil),
  Query: &ast.Select{
    Select:   0,
    Distinct: false,
    AsStruct: false,
    Results:  []ast.SelectItem{
      &ast.Star{
        Star: 9,
      },
    },
    From: &ast.From{
      From:   11,
      Source: &ast.Join{
        Op:     "INNER JOIN",
        Method: "",
        Hint:   (*ast.Hint)(nil),
        Left:   &ast.Join{
          Op:     "INNER JOIN",
          Method: "",
          Hint:   (*ast.Hint)(nil),
          Left:   &ast.TableName{
            Table: &ast.Ident{
              NamePos: 18,
              NameEnd: 25,
              Name:    "Singers",
            },
            Hint: (*ast.Hint)(nil),
            As:   &ast.AsAlias{
              As:    26,
              Alias: &ast.Ident{
                NamePos: 26,
                NameEnd: 27,
                Name:    "A",
              },
            },
            Sample: (*ast.TableSample)(nil),
          },
          Right: &ast.TableName{
            Table: &ast.Ident{
              NamePos: 37,
              NameEnd: 44,
              Name:    "Singers",
            },
            Hint: (*ast.Hint)(nil),
            As:   &ast.AsAlias{
              As:    45,
              Alias: &ast.Ident{
                NamePos: 45,
                NameEnd: 46,
                Name:    "B",
              },
            },
            Sample: (*ast.TableSample)(nil),
          },
          Cond: &ast.On{
            On:   49,
            Expr: &ast.BinaryExpr{
              Op:   "=",
              Left: &ast.Path{
                Idents: []*ast.Ident{
                  &ast.Ident{
                    NamePos: 52,
                    NameEnd: 53,
                    Name:    "A",
                  },
                  &ast.Ident{
                    NamePos: 54,
                    NameEnd: 62,
                    Name:    "SingerID",
                  },
                },
              },
              Right: &ast.Path{
                Idents: []*ast.Ident{
                  &ast.Ident{
                    NamePos: 65,
                    NameEnd: 66,
                    Name:    "B",
                  },
                  &ast.Ident{
                    NamePos: 67,
                    NameEnd: 75,
                    Name:    "SingerID",
                  },
                },
              },
            },
          },
        },
        Right: &ast.TableName{
          Table: &ast.Ident{
            NamePos: 91,
            NameEnd: 98,
            Name:    "Singers",
          },
          Hint: (*ast.Hint)(nil),
          As:   &ast.AsAlias{
            As:    99,
            Alias: &ast.Ident{
              NamePos: 99,
              NameEnd: 100,
              Name:    "C",
            },
          },
          Sample: (*ast.TableSample)(nil),
        },
        Cond: &ast.On{
          On:   103,
          Expr: &ast.BinaryExpr{
            Op:   "=",
            Left: &ast.Path{
              Idents: []*ast.Ident{
                &ast.Ident{
                  NamePos: 106,
                  NameEnd: 107,
                  Name:    "A",
                },
                &ast.Ident{
                  NamePos: 108,
                  NameEnd: 116,
                  Name:    "SingerID",
                },
              },
            },
            Right: &ast.Path{
              Idents: []*ast.Ident{
                &ast.Ident{
                  NamePos: 119,
                  NameEnd: 120,
                  Name:    "C",
                },
                &ast.Ident{
                  NamePos: 121,
                  NameEnd: 129,
                  Name:    "SingerID",
                },
              },
            },
          },
        },
      },
    },
    Where:   (*ast.Where)(nil),
    GroupBy: (*ast.GroupBy)(nil),
    Having:  (*ast.Having)(nil),
    OrderBy: (*ast.OrderBy)(nil),
    Limit:   (*ast.Limit)(nil),
  },
}

--- SQL
SELECT * FROM Singers AS A INNER JOIN Singers AS B ON A.SingerID = B.SingerID INNER JOIN Singers AS C ON A.SingerID = C.SingerID
