--- array_functions_array_filter_one_arg_with_paren_lambda.sql
ARRAY_FILTER([1 ,2, 3], (e) -> e > 1)
--- AST
&ast.CallExpr{
  Rparen: 36,
  Func:   &ast.Ident{
    NamePos: 0,
    NameEnd: 12,
    Name:    "ARRAY_FILTER",
  },
  Distinct: false,
  Args:     []ast.Arg{
    &ast.ExprArg{
      Expr: &ast.ArrayLiteral{
        Array:  -1,
        Lbrack: 13,
        Rbrack: 21,
        Type:   nil,
        Values: []ast.Expr{
          &ast.IntLiteral{
            ValuePos: 14,
            ValueEnd: 15,
            Base:     10,
            Value:    "1",
          },
          &ast.IntLiteral{
            ValuePos: 17,
            ValueEnd: 18,
            Base:     10,
            Value:    "2",
          },
          &ast.IntLiteral{
            ValuePos: 20,
            ValueEnd: 21,
            Base:     10,
            Value:    "3",
          },
        },
      },
    },
    &ast.LambdaArg{
      Lparen: 24,
      Args:   []*ast.Ident{
        &ast.Ident{
          NamePos: 25,
          NameEnd: 26,
          Name:    "e",
        },
      },
      Expr: &ast.BinaryExpr{
        Op:   ">",
        Left: &ast.Ident{
          NamePos: 31,
          NameEnd: 32,
          Name:    "e",
        },
        Right: &ast.IntLiteral{
          ValuePos: 35,
          ValueEnd: 36,
          Base:     10,
          Value:    "1",
        },
      },
    },
  },
  NamedArgs:    []*ast.NamedArg(nil),
  NullHandling: nil,
  Having:       nil,
}

--- SQL
ARRAY_FILTER([1, 2, 3], (e) -> e > 1)
