--- next.sql
GRAPH FinGraph
MATCH (:Account)-[:Transfers]->(account:Account)
RETURN account, COUNT(*) AS num_incoming_transfers
GROUP BY account

NEXT

MATCH (account:Account)<-[:Owns]-(owner:Person)
RETURN
  account.id AS account_id, owner.name AS owner_name,
  num_incoming_transfers

NEXT

FILTER num_incoming_transfers < 2
RETURN account_id, owner_name
UNION ALL
RETURN "Bob" AS owner_name, 100 AS account_id
--- AST
&ast.GQLGraphQuery{
  GraphClause: &ast.GQLGraphClause{
    Graph:             0,
    PropertyGraphName: &ast.Ident{
      NamePos: 6,
      NameEnd: 14,
      Name:    "FinGraph",
    },
  },
  MultiLinearQueryStatement: &ast.GQLMultiLinearQueryStatement{
    LinearQueryStatementList: []ast.GQLLinearQueryStatement{
      &ast.GQLSimpleLinearQueryStatement{
        PrimitiveQueryStatementList: []ast.GQLPrimitiveQueryStatement{
          &ast.GQLMatchStatement{
            Optional:     -1,
            Match:        15,
            MatchHint:    (*ast.Hint)(nil),
            PrefixOrMode: nil,
            GraphPattern: &ast.GQLGraphPattern{
              PathPatternList: []*ast.GQLTopLevelPathPattern{
                &ast.GQLTopLevelPathPattern{
                  PathSearchPrefixOrPathMode: nil,
                  PathPattern:                &ast.GQLPathPattern{
                    PathTermList: []*ast.GQLQuantifiablePathTerm{
                      &ast.GQLQuantifiablePathTerm{
                        Hint:     (*ast.Hint)(nil),
                        PathTerm: &ast.GQLNodePattern{
                          LParen:        21,
                          RParen:        30,
                          PatternFiller: &ast.GQLPatternFiller{
                            Hint:                 (*ast.Hint)(nil),
                            GraphPatternVariable: (*ast.Ident)(nil),
                            IsLabelCondition:     &ast.GQLIsLabelCondition{
                              IsOrColon:       22,
                              LabelExpression: &ast.GQLLabelName{
                                StartPos:  23,
                                IsPercent: false,
                                LabelName: &ast.Ident{
                                  NamePos: 23,
                                  NameEnd: 30,
                                  Name:    "Account",
                                },
                              },
                            },
                            Filter: nil,
                          },
                        },
                        Quantifier: nil,
                      },
                      &ast.GQLQuantifiablePathTerm{
                        Hint:     (*ast.Hint)(nil),
                        PathTerm: &ast.GQLFullEdgeRight{
                          Hyphen:        31,
                          Gt:            44,
                          PatternFiller: &ast.GQLPatternFiller{
                            Hint:                 (*ast.Hint)(nil),
                            GraphPatternVariable: (*ast.Ident)(nil),
                            IsLabelCondition:     &ast.GQLIsLabelCondition{
                              IsOrColon:       33,
                              LabelExpression: &ast.GQLLabelName{
                                StartPos:  34,
                                IsPercent: false,
                                LabelName: &ast.Ident{
                                  NamePos: 34,
                                  NameEnd: 43,
                                  Name:    "Transfers",
                                },
                              },
                            },
                            Filter: nil,
                          },
                        },
                        Quantifier: nil,
                      },
                      &ast.GQLQuantifiablePathTerm{
                        Hint:     (*ast.Hint)(nil),
                        PathTerm: &ast.GQLNodePattern{
                          LParen:        46,
                          RParen:        62,
                          PatternFiller: &ast.GQLPatternFiller{
                            Hint:                 (*ast.Hint)(nil),
                            GraphPatternVariable: &ast.Ident{
                              NamePos: 47,
                              NameEnd: 54,
                              Name:    "account",
                            },
                            IsLabelCondition: &ast.GQLIsLabelCondition{
                              IsOrColon:       54,
                              LabelExpression: &ast.GQLLabelName{
                                StartPos:  55,
                                IsPercent: false,
                                LabelName: &ast.Ident{
                                  NamePos: 55,
                                  NameEnd: 62,
                                  Name:    "Account",
                                },
                              },
                            },
                            Filter: nil,
                          },
                        },
                        Quantifier: nil,
                      },
                    },
                  },
                },
              },
              WhereClause: (*ast.Where)(nil),
            },
          },
          &ast.GQLReturnStatement{
            Return:         64,
            AllOrDistinct:  "",
            ReturnItemList: []ast.GQLReturnItem{
              &ast.ExprSelectItem{
                Expr: &ast.Ident{
                  NamePos: 71,
                  NameEnd: 78,
                  Name:    "account",
                },
              },
              &ast.Alias{
                Expr: &ast.CountStarExpr{
                  Count:  80,
                  Rparen: 87,
                },
                As: &ast.AsAlias{
                  As:    89,
                  Alias: &ast.Ident{
                    NamePos: 92,
                    NameEnd: 114,
                    Name:    "num_incoming_transfers",
                  },
                },
              },
            },
            GroupByClause: &ast.GroupBy{
              Group: 115,
              Exprs: []ast.Expr{
                &ast.Ident{
                  NamePos: 124,
                  NameEnd: 131,
                  Name:    "account",
                },
              },
            },
            OrderByClause:        (*ast.OrderBy)(nil),
            LimitAndOffsetClause: nil,
          },
        },
      },
      &ast.GQLSimpleLinearQueryStatement{
        PrimitiveQueryStatementList: []ast.GQLPrimitiveQueryStatement{
          &ast.GQLMatchStatement{
            Optional:     -1,
            Match:        139,
            MatchHint:    (*ast.Hint)(nil),
            PrefixOrMode: nil,
            GraphPattern: &ast.GQLGraphPattern{
              PathPatternList: []*ast.GQLTopLevelPathPattern{
                &ast.GQLTopLevelPathPattern{
                  PathSearchPrefixOrPathMode: nil,
                  PathPattern:                &ast.GQLPathPattern{
                    PathTermList: []*ast.GQLQuantifiablePathTerm{
                      &ast.GQLQuantifiablePathTerm{
                        Hint:     (*ast.Hint)(nil),
                        PathTerm: &ast.GQLNodePattern{
                          LParen:        145,
                          RParen:        161,
                          PatternFiller: &ast.GQLPatternFiller{
                            Hint:                 (*ast.Hint)(nil),
                            GraphPatternVariable: &ast.Ident{
                              NamePos: 146,
                              NameEnd: 153,
                              Name:    "account",
                            },
                            IsLabelCondition: &ast.GQLIsLabelCondition{
                              IsOrColon:       153,
                              LabelExpression: &ast.GQLLabelName{
                                StartPos:  154,
                                IsPercent: false,
                                LabelName: &ast.Ident{
                                  NamePos: 154,
                                  NameEnd: 161,
                                  Name:    "Account",
                                },
                              },
                            },
                            Filter: nil,
                          },
                        },
                        Quantifier: nil,
                      },
                      &ast.GQLQuantifiablePathTerm{
                        Hint:     (*ast.Hint)(nil),
                        PathTerm: &ast.GQLFullEdgeLeft{
                          Lt:            162,
                          Hyphen:        171,
                          PatternFiller: &ast.GQLPatternFiller{
                            Hint:                 (*ast.Hint)(nil),
                            GraphPatternVariable: (*ast.Ident)(nil),
                            IsLabelCondition:     &ast.GQLIsLabelCondition{
                              IsOrColon:       165,
                              LabelExpression: &ast.GQLLabelName{
                                StartPos:  166,
                                IsPercent: false,
                                LabelName: &ast.Ident{
                                  NamePos: 166,
                                  NameEnd: 170,
                                  Name:    "Owns",
                                },
                              },
                            },
                            Filter: nil,
                          },
                        },
                        Quantifier: nil,
                      },
                      &ast.GQLQuantifiablePathTerm{
                        Hint:     (*ast.Hint)(nil),
                        PathTerm: &ast.GQLNodePattern{
                          LParen:        172,
                          RParen:        185,
                          PatternFiller: &ast.GQLPatternFiller{
                            Hint:                 (*ast.Hint)(nil),
                            GraphPatternVariable: &ast.Ident{
                              NamePos: 173,
                              NameEnd: 178,
                              Name:    "owner",
                            },
                            IsLabelCondition: &ast.GQLIsLabelCondition{
                              IsOrColon:       178,
                              LabelExpression: &ast.GQLLabelName{
                                StartPos:  179,
                                IsPercent: false,
                                LabelName: &ast.Ident{
                                  NamePos: 179,
                                  NameEnd: 185,
                                  Name:    "Person",
                                },
                              },
                            },
                            Filter: nil,
                          },
                        },
                        Quantifier: nil,
                      },
                    },
                  },
                },
              },
              WhereClause: (*ast.Where)(nil),
            },
          },
          &ast.GQLReturnStatement{
            Return:         187,
            AllOrDistinct:  "",
            ReturnItemList: []ast.GQLReturnItem{
              &ast.Alias{
                Expr: &ast.Path{
                  Idents: []*ast.Ident{
                    &ast.Ident{
                      NamePos: 196,
                      NameEnd: 203,
                      Name:    "account",
                    },
                    &ast.Ident{
                      NamePos: 204,
                      NameEnd: 206,
                      Name:    "id",
                    },
                  },
                },
                As: &ast.AsAlias{
                  As:    207,
                  Alias: &ast.Ident{
                    NamePos: 210,
                    NameEnd: 220,
                    Name:    "account_id",
                  },
                },
              },
              &ast.Alias{
                Expr: &ast.Path{
                  Idents: []*ast.Ident{
                    &ast.Ident{
                      NamePos: 222,
                      NameEnd: 227,
                      Name:    "owner",
                    },
                    &ast.Ident{
                      NamePos: 228,
                      NameEnd: 232,
                      Name:    "name",
                    },
                  },
                },
                As: &ast.AsAlias{
                  As:    233,
                  Alias: &ast.Ident{
                    NamePos: 236,
                    NameEnd: 246,
                    Name:    "owner_name",
                  },
                },
              },
              &ast.ExprSelectItem{
                Expr: &ast.Ident{
                  NamePos: 250,
                  NameEnd: 272,
                  Name:    "num_incoming_transfers",
                },
              },
            },
            GroupByClause:        (*ast.GroupBy)(nil),
            OrderByClause:        (*ast.OrderBy)(nil),
            LimitAndOffsetClause: nil,
          },
        },
      },
      &ast.GQLCompositeLinearQueryStatement{
        HeadSimpleLinearQueryStatement: &ast.GQLSimpleLinearQueryStatement{
          PrimitiveQueryStatementList: []ast.GQLPrimitiveQueryStatement{
            &ast.GQLFilterStatement{
              Filter: 280,
              Where:  -1,
              Expr:   &ast.BinaryExpr{
                Op:   "<",
                Left: &ast.Ident{
                  NamePos: 287,
                  NameEnd: 309,
                  Name:    "num_incoming_transfers",
                },
                Right: &ast.IntLiteral{
                  ValuePos: 312,
                  ValueEnd: 313,
                  Base:     10,
                  Value:    "2",
                },
              },
            },
            &ast.GQLReturnStatement{
              Return:         314,
              AllOrDistinct:  "",
              ReturnItemList: []ast.GQLReturnItem{
                &ast.ExprSelectItem{
                  Expr: &ast.Ident{
                    NamePos: 321,
                    NameEnd: 331,
                    Name:    "account_id",
                  },
                },
                &ast.ExprSelectItem{
                  Expr: &ast.Ident{
                    NamePos: 333,
                    NameEnd: 343,
                    Name:    "owner_name",
                  },
                },
              },
              GroupByClause:        (*ast.GroupBy)(nil),
              OrderByClause:        (*ast.OrderBy)(nil),
              LimitAndOffsetClause: nil,
            },
          },
        },
        TailSimpleLinearQueryStatementList: []*ast.GQLSimpleLinearQueryStatementWithSetOperator{
          &ast.GQLSimpleLinearQueryStatementWithSetOperator{
            StartPos:      344,
            SetOperator:   "UNION",
            DistinctOrAll: "ALL",
            Statement:     &ast.GQLSimpleLinearQueryStatement{
              PrimitiveQueryStatementList: []ast.GQLPrimitiveQueryStatement{
                &ast.GQLReturnStatement{
                  Return:         354,
                  AllOrDistinct:  "",
                  ReturnItemList: []ast.GQLReturnItem{
                    &ast.Alias{
                      Expr: &ast.StringLiteral{
                        ValuePos: 361,
                        ValueEnd: 366,
                        Value:    "Bob",
                      },
                      As: &ast.AsAlias{
                        As:    367,
                        Alias: &ast.Ident{
                          NamePos: 370,
                          NameEnd: 380,
                          Name:    "owner_name",
                        },
                      },
                    },
                    &ast.Alias{
                      Expr: &ast.IntLiteral{
                        ValuePos: 382,
                        ValueEnd: 385,
                        Base:     10,
                        Value:    "100",
                      },
                      As: &ast.AsAlias{
                        As:    386,
                        Alias: &ast.Ident{
                          NamePos: 389,
                          NameEnd: 399,
                          Name:    "account_id",
                        },
                      },
                    },
                  },
                  GroupByClause:        (*ast.GroupBy)(nil),
                  OrderByClause:        (*ast.OrderBy)(nil),
                  LimitAndOffsetClause: nil,
                },
              },
            },
          },
        },
      },
    },
  },
}

--- SQL
GRAPH FinGraph
MATCH (:Account)-[:Transfers]->(account:Account)
RETURN account, COUNT(*) AS num_incoming_transfers GROUP BY account
NEXT
MATCH (account:Account)<-[:Owns]-(owner:Person)
RETURN account.id AS account_id, owner.name AS owner_name, num_incoming_transfers
NEXT
FILTER num_incoming_transfers < 2
RETURN account_id, owner_name
UNION ALL
RETURN "Bob" AS owner_name, 100 AS account_id
