--- limit.sql
GRAPH FinGraph
MATCH (source:Account)-[e:Transfers]->(destination:Account)
ORDER BY source.nick_name
LIMIT 3
RETURN source.nick_name
--- AST
&ast.GQLGraphQuery{
  GraphClause: &ast.GQLGraphClause{
    Graph:             0,
    PropertyGraphName: &ast.Ident{
      NamePos: 6,
      NameEnd: 14,
      Name:    "FinGraph",
    },
  },
  MultiLinearQueryStatement: &ast.GQLMultiLinearQueryStatement{
    LinearQueryStatementList: []ast.GQLLinearQueryStatement{
      &ast.GQLSimpleLinearQueryStatement{
        PrimitiveQueryStatementList: []ast.GQLPrimitiveQueryStatement{
          &ast.GQLMatchStatement{
            Optional:     -1,
            Match:        15,
            MatchHint:    (*ast.Hint)(nil),
            PrefixOrMode: nil,
            GraphPattern: &ast.GQLGraphPattern{
              PathPatternList: []*ast.GQLTopLevelPathPattern{
                &ast.GQLTopLevelPathPattern{
                  PathSearchPrefixOrPathMode: nil,
                  PathPattern:                &ast.GQLPathPattern{
                    PathTermList: []*ast.GQLQuantifiablePathTerm{
                      &ast.GQLQuantifiablePathTerm{
                        Hint:     (*ast.Hint)(nil),
                        PathTerm: &ast.GQLNodePattern{
                          LParen:        21,
                          RParen:        36,
                          PatternFiller: &ast.GQLPatternFiller{
                            Hint:                 (*ast.Hint)(nil),
                            GraphPatternVariable: &ast.Ident{
                              NamePos: 22,
                              NameEnd: 28,
                              Name:    "source",
                            },
                            IsLabelCondition: &ast.GQLIsLabelCondition{
                              IsOrColon:       28,
                              LabelExpression: &ast.GQLLabelName{
                                StartPos:  29,
                                IsPercent: false,
                                LabelName: &ast.Ident{
                                  NamePos: 29,
                                  NameEnd: 36,
                                  Name:    "Account",
                                },
                              },
                            },
                            Filter: nil,
                          },
                        },
                        Quantifier: nil,
                      },
                      &ast.GQLQuantifiablePathTerm{
                        Hint:     (*ast.Hint)(nil),
                        PathTerm: &ast.GQLFullEdgeRight{
                          First:         37,
                          Last:          51,
                          PatternFiller: &ast.GQLPatternFiller{
                            Hint:                 (*ast.Hint)(nil),
                            GraphPatternVariable: &ast.Ident{
                              NamePos: 39,
                              NameEnd: 40,
                              Name:    "e",
                            },
                            IsLabelCondition: &ast.GQLIsLabelCondition{
                              IsOrColon:       40,
                              LabelExpression: &ast.GQLLabelName{
                                StartPos:  41,
                                IsPercent: false,
                                LabelName: &ast.Ident{
                                  NamePos: 41,
                                  NameEnd: 50,
                                  Name:    "Transfers",
                                },
                              },
                            },
                            Filter: nil,
                          },
                        },
                        Quantifier: nil,
                      },
                      &ast.GQLQuantifiablePathTerm{
                        Hint:     (*ast.Hint)(nil),
                        PathTerm: &ast.GQLNodePattern{
                          LParen:        53,
                          RParen:        73,
                          PatternFiller: &ast.GQLPatternFiller{
                            Hint:                 (*ast.Hint)(nil),
                            GraphPatternVariable: &ast.Ident{
                              NamePos: 54,
                              NameEnd: 65,
                              Name:    "destination",
                            },
                            IsLabelCondition: &ast.GQLIsLabelCondition{
                              IsOrColon:       65,
                              LabelExpression: &ast.GQLLabelName{
                                StartPos:  66,
                                IsPercent: false,
                                LabelName: &ast.Ident{
                                  NamePos: 66,
                                  NameEnd: 73,
                                  Name:    "Account",
                                },
                              },
                            },
                            Filter: nil,
                          },
                        },
                        Quantifier: nil,
                      },
                    },
                  },
                },
              },
              WhereClause: (*ast.Where)(nil),
            },
          },
          &ast.GQLOrderByStatement{
            Order:                    75,
            OrderBySpecificationList: []*ast.GQLOrderBySpecification{
              &ast.GQLOrderBySpecification{
                Expr: &ast.Path{
                  Idents: []*ast.Ident{
                    &ast.Ident{
                      NamePos: 84,
                      NameEnd: 90,
                      Name:    "source",
                    },
                    &ast.Ident{
                      NamePos: 91,
                      NameEnd: 100,
                      Name:    "nick_name",
                    },
                  },
                },
                CollationSpecification: (*ast.GQLCollationSpecification)(nil),
                DirectionPos:           -1,
                Direction:              "",
              },
            },
          },
          &ast.GQLLimitStatement{
            Limit: 101,
            Count: &ast.IntLiteral{
              ValuePos: 107,
              ValueEnd: 108,
              Base:     10,
              Value:    "3",
            },
          },
          &ast.GQLReturnStatement{
            Return:         109,
            AllOrDistinct:  "",
            ReturnItemList: []ast.GQLReturnItem{
              &ast.ExprSelectItem{
                Expr: &ast.Path{
                  Idents: []*ast.Ident{
                    &ast.Ident{
                      NamePos: 116,
                      NameEnd: 122,
                      Name:    "source",
                    },
                    &ast.Ident{
                      NamePos: 123,
                      NameEnd: 132,
                      Name:    "nick_name",
                    },
                  },
                },
              },
            },
            GroupByClause:        (*ast.GroupBy)(nil),
            OrderByClause:        (*ast.OrderBy)(nil),
            LimitAndOffsetClause: nil,
          },
        },
      },
    },
  },
}

--- SQL
GRAPH FinGraph
MATCH (source:Account)-[e:Transfers]->(destination:Account)
ORDER BY source.nick_name
LIMIT 3
RETURN source.nick_name
