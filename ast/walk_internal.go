// Code generated by tools/gen-ast-walk; DO NOT EDIT.

package ast

func walkInternal(node Node, v Visitor, stack []*stackItem) []*stackItem {
	switch n := node.(type) {
	case *BadNode:
		// nothing to do

	case *BadStatement:
		// nothing to do

	case *BadQueryExpr:
		// nothing to do

	case *BadExpr:
		// nothing to do

	case *BadType:
		// nothing to do

	case *BadDDL:
		// nothing to do

	case *BadDML:
		// nothing to do

	case *QueryStatement:
		stack = append(stack, &stackItem{node: wrapNode(n.Query), visitor: v.Field("Query")})

	case *Query:
		stack = append(stack, &stackItem{node: wrapNode(n.Query), visitor: v.Field("Query")})

	case *Hint:
		// nothing to do

	case *HintRecord:
		stack = append(stack, &stackItem{node: wrapNode(n.Value), visitor: v.Field("Value")})

	case *With:
		// nothing to do

	case *CTE:
		stack = append(stack, &stackItem{node: wrapNode(n.QueryExpr), visitor: v.Field("QueryExpr")})

	case *Select:
		stack = append(stack, &stackItem{node: wrapNode(n.As), visitor: v.Field("As")})

	case *AsStruct:
		// nothing to do

	case *AsValue:
		// nothing to do

	case *AsTypeName:
		// nothing to do

	case *FromQuery:
		// nothing to do

	case *CompoundQuery:
		// nothing to do

	case *SubQuery:
		stack = append(stack, &stackItem{node: wrapNode(n.Query), visitor: v.Field("Query")})

	case *StarModifierExcept:
		// nothing to do

	case *StarModifierReplaceItem:
		stack = append(stack, &stackItem{node: wrapNode(n.Expr), visitor: v.Field("Expr")})

	case *StarModifierReplace:
		// nothing to do

	case *Star:
		// nothing to do

	case *DotStar:
		stack = append(stack, &stackItem{node: wrapNode(n.Expr), visitor: v.Field("Expr")})

	case *Alias:
		stack = append(stack, &stackItem{node: wrapNode(n.Expr), visitor: v.Field("Expr")})

	case *AsAlias:
		// nothing to do

	case *ExprSelectItem:
		stack = append(stack, &stackItem{node: wrapNode(n.Expr), visitor: v.Field("Expr")})

	case *From:
		stack = append(stack, &stackItem{node: wrapNode(n.Source), visitor: v.Field("Source")})

	case *Where:
		stack = append(stack, &stackItem{node: wrapNode(n.Expr), visitor: v.Field("Expr")})

	case *GroupBy:
		// nothing to do

	case *Having:
		stack = append(stack, &stackItem{node: wrapNode(n.Expr), visitor: v.Field("Expr")})

	case *OrderBy:
		// nothing to do

	case *OrderByItem:
		stack = append(stack, &stackItem{node: wrapNode(n.Expr), visitor: v.Field("Expr")})

	case *Collate:
		stack = append(stack, &stackItem{node: wrapNode(n.Value), visitor: v.Field("Value")})

	case *Limit:
		stack = append(stack, &stackItem{node: wrapNode(n.Count), visitor: v.Field("Count")})

	case *Offset:
		stack = append(stack, &stackItem{node: wrapNode(n.Value), visitor: v.Field("Value")})

	case *PipeSelect:
		stack = append(stack, &stackItem{node: wrapNode(n.As), visitor: v.Field("As")})

	case *PipeWhere:
		stack = append(stack, &stackItem{node: wrapNode(n.Expr), visitor: v.Field("Expr")})

	case *Unnest:
		stack = append(stack, &stackItem{node: wrapNode(n.Expr), visitor: v.Field("Expr")})

	case *WithOffset:
		// nothing to do

	case *TableName:
		// nothing to do

	case *PathTableExpr:
		// nothing to do

	case *SubQueryTableExpr:
		stack = append(stack, &stackItem{node: wrapNode(n.Query), visitor: v.Field("Query")})

	case *ParenTableExpr:
		stack = append(stack, &stackItem{node: wrapNode(n.Source), visitor: v.Field("Source")})

	case *GraphTableExpr:
		// nothing to do

	case *Join:
		stack = append(stack, &stackItem{node: wrapNode(n.Cond), visitor: v.Field("Cond")})
		stack = append(stack, &stackItem{node: wrapNode(n.Right), visitor: v.Field("Right")})
		stack = append(stack, &stackItem{node: wrapNode(n.Left), visitor: v.Field("Left")})

	case *On:
		stack = append(stack, &stackItem{node: wrapNode(n.Expr), visitor: v.Field("Expr")})

	case *Using:
		// nothing to do

	case *TableSample:
		// nothing to do

	case *TableSampleSize:
		stack = append(stack, &stackItem{node: wrapNode(n.Value), visitor: v.Field("Value")})

	case *BinaryExpr:
		stack = append(stack, &stackItem{node: wrapNode(n.Right), visitor: v.Field("Right")})
		stack = append(stack, &stackItem{node: wrapNode(n.Left), visitor: v.Field("Left")})

	case *UnaryExpr:
		stack = append(stack, &stackItem{node: wrapNode(n.Expr), visitor: v.Field("Expr")})

	case *InExpr:
		stack = append(stack, &stackItem{node: wrapNode(n.Right), visitor: v.Field("Right")})
		stack = append(stack, &stackItem{node: wrapNode(n.Left), visitor: v.Field("Left")})

	case *UnnestInCondition:
		stack = append(stack, &stackItem{node: wrapNode(n.Expr), visitor: v.Field("Expr")})

	case *SubQueryInCondition:
		stack = append(stack, &stackItem{node: wrapNode(n.Query), visitor: v.Field("Query")})

	case *ValuesInCondition:
		// nothing to do

	case *GQLSubQueryInCondition:
		// nothing to do

	case *IsNullExpr:
		stack = append(stack, &stackItem{node: wrapNode(n.Left), visitor: v.Field("Left")})

	case *IsBoolExpr:
		stack = append(stack, &stackItem{node: wrapNode(n.Left), visitor: v.Field("Left")})

	case *IsSourceExpr:
		stack = append(stack, &stackItem{node: wrapNode(n.Edge), visitor: v.Field("Edge")})
		stack = append(stack, &stackItem{node: wrapNode(n.Node), visitor: v.Field("Node")})

	case *IsDestinationExpr:
		stack = append(stack, &stackItem{node: wrapNode(n.Edge), visitor: v.Field("Edge")})
		stack = append(stack, &stackItem{node: wrapNode(n.Node), visitor: v.Field("Node")})

	case *BetweenExpr:
		stack = append(stack, &stackItem{node: wrapNode(n.RightEnd), visitor: v.Field("RightEnd")})
		stack = append(stack, &stackItem{node: wrapNode(n.RightStart), visitor: v.Field("RightStart")})
		stack = append(stack, &stackItem{node: wrapNode(n.Left), visitor: v.Field("Left")})

	case *SelectorExpr:
		stack = append(stack, &stackItem{node: wrapNode(n.Expr), visitor: v.Field("Expr")})

	case *IndexExpr:
		stack = append(stack, &stackItem{node: wrapNode(n.Index), visitor: v.Field("Index")})
		stack = append(stack, &stackItem{node: wrapNode(n.Expr), visitor: v.Field("Expr")})

	case *SubscriptSpecifierKeyword:
		stack = append(stack, &stackItem{node: wrapNode(n.Expr), visitor: v.Field("Expr")})

	case *CallExpr:
		stack = append(stack, &stackItem{node: wrapNode(n.Having), visitor: v.Field("Having")})
		stack = append(stack, &stackItem{node: wrapNode(n.NullHandling), visitor: v.Field("NullHandling")})

	case *TVFCallExpr:
		// nothing to do

	case *ExprArg:
		stack = append(stack, &stackItem{node: wrapNode(n.Expr), visitor: v.Field("Expr")})

	case *IntervalArg:
		stack = append(stack, &stackItem{node: wrapNode(n.Expr), visitor: v.Field("Expr")})

	case *SequenceArg:
		stack = append(stack, &stackItem{node: wrapNode(n.Expr), visitor: v.Field("Expr")})

	case *LambdaArg:
		stack = append(stack, &stackItem{node: wrapNode(n.Expr), visitor: v.Field("Expr")})

	case *ModelArg:
		// nothing to do

	case *TableArg:
		// nothing to do

	case *NamedArg:
		stack = append(stack, &stackItem{node: wrapNode(n.Value), visitor: v.Field("Value")})

	case *IgnoreNulls:
		// nothing to do

	case *RespectNulls:
		// nothing to do

	case *HavingMax:
		stack = append(stack, &stackItem{node: wrapNode(n.Expr), visitor: v.Field("Expr")})

	case *HavingMin:
		stack = append(stack, &stackItem{node: wrapNode(n.Expr), visitor: v.Field("Expr")})

	case *CountStarExpr:
		// nothing to do

	case *ExtractExpr:
		stack = append(stack, &stackItem{node: wrapNode(n.Expr), visitor: v.Field("Expr")})

	case *ReplaceFieldsArg:
		stack = append(stack, &stackItem{node: wrapNode(n.Expr), visitor: v.Field("Expr")})

	case *ReplaceFieldsExpr:
		stack = append(stack, &stackItem{node: wrapNode(n.Expr), visitor: v.Field("Expr")})

	case *AtTimeZone:
		stack = append(stack, &stackItem{node: wrapNode(n.Expr), visitor: v.Field("Expr")})

	case *WithExprVar:
		stack = append(stack, &stackItem{node: wrapNode(n.Expr), visitor: v.Field("Expr")})

	case *WithExpr:
		stack = append(stack, &stackItem{node: wrapNode(n.Expr), visitor: v.Field("Expr")})

	case *CastExpr:
		stack = append(stack, &stackItem{node: wrapNode(n.Type), visitor: v.Field("Type")})
		stack = append(stack, &stackItem{node: wrapNode(n.Expr), visitor: v.Field("Expr")})

	case *CaseExpr:
		stack = append(stack, &stackItem{node: wrapNode(n.Expr), visitor: v.Field("Expr")})

	case *CaseWhen:
		stack = append(stack, &stackItem{node: wrapNode(n.Then), visitor: v.Field("Then")})
		stack = append(stack, &stackItem{node: wrapNode(n.Cond), visitor: v.Field("Cond")})

	case *CaseElse:
		stack = append(stack, &stackItem{node: wrapNode(n.Expr), visitor: v.Field("Expr")})

	case *IfExpr:
		stack = append(stack, &stackItem{node: wrapNode(n.ElseResult), visitor: v.Field("ElseResult")})
		stack = append(stack, &stackItem{node: wrapNode(n.TrueResult), visitor: v.Field("TrueResult")})
		stack = append(stack, &stackItem{node: wrapNode(n.Expr), visitor: v.Field("Expr")})

	case *ParenExpr:
		stack = append(stack, &stackItem{node: wrapNode(n.Expr), visitor: v.Field("Expr")})

	case *ScalarSubQuery:
		stack = append(stack, &stackItem{node: wrapNode(n.Query), visitor: v.Field("Query")})

	case *ArraySubQuery:
		stack = append(stack, &stackItem{node: wrapNode(n.Query), visitor: v.Field("Query")})

	case *ArrayGQLSubQuery:
		// nothing to do

	case *ValueGQLSubQuery:
		// nothing to do

	case *ExistsGQLSubQuery:
		// nothing to do

	case *ExistsSubQuery:
		stack = append(stack, &stackItem{node: wrapNode(n.Query), visitor: v.Field("Query")})

	case *Param:
		// nothing to do

	case *Ident:
		// nothing to do

	case *Path:
		// nothing to do

	case *ArrayLiteral:
		stack = append(stack, &stackItem{node: wrapNode(n.Type), visitor: v.Field("Type")})

	case *TupleStructLiteral:
		// nothing to do

	case *TypedStructLiteral:
		// nothing to do

	case *TypelessStructLiteral:
		// nothing to do

	case *NullLiteral:
		// nothing to do

	case *BoolLiteral:
		// nothing to do

	case *IntLiteral:
		// nothing to do

	case *FloatLiteral:
		// nothing to do

	case *StringLiteral:
		// nothing to do

	case *BytesLiteral:
		// nothing to do

	case *DateLiteral:
		// nothing to do

	case *TimestampLiteral:
		// nothing to do

	case *NumericLiteral:
		// nothing to do

	case *JSONLiteral:
		// nothing to do

	case *NewConstructor:
		// nothing to do

	case *BracedNewConstructor:
		// nothing to do

	case *BracedConstructor:
		// nothing to do

	case *BracedConstructorField:
		stack = append(stack, &stackItem{node: wrapNode(n.Value), visitor: v.Field("Value")})

	case *BracedConstructorFieldValueExpr:
		stack = append(stack, &stackItem{node: wrapNode(n.Expr), visitor: v.Field("Expr")})

	case *SimpleType:
		// nothing to do

	case *ArrayType:
		stack = append(stack, &stackItem{node: wrapNode(n.Item), visitor: v.Field("Item")})

	case *StructType:
		// nothing to do

	case *StructField:
		stack = append(stack, &stackItem{node: wrapNode(n.Type), visitor: v.Field("Type")})

	case *NamedType:
		// nothing to do

	case *CastIntValue:
		stack = append(stack, &stackItem{node: wrapNode(n.Expr), visitor: v.Field("Expr")})

	case *CastNumValue:
		stack = append(stack, &stackItem{node: wrapNode(n.Expr), visitor: v.Field("Expr")})

	case *Options:
		// nothing to do

	case *OptionsDef:
		stack = append(stack, &stackItem{node: wrapNode(n.Value), visitor: v.Field("Value")})

	case *CreateSchema:
		// nothing to do

	case *DropSchema:
		// nothing to do

	case *CreateDatabase:
		// nothing to do

	case *AlterDatabase:
		// nothing to do

	case *CreatePlacement:
		// nothing to do

	case *ProtoBundleTypes:
		// nothing to do

	case *CreateProtoBundle:
		// nothing to do

	case *AlterProtoBundle:
		// nothing to do

	case *AlterProtoBundleInsert:
		// nothing to do

	case *AlterProtoBundleUpdate:
		// nothing to do

	case *AlterProtoBundleDelete:
		// nothing to do

	case *DropProtoBundle:
		// nothing to do

	case *CreateTable:
		// nothing to do

	case *Synonym:
		// nothing to do

	case *CreateSequence:
		// nothing to do

	case *SkipRange:
		// nothing to do

	case *StartCounterWith:
		// nothing to do

	case *BitReversedPositive:
		// nothing to do

	case *ColumnDef:
		stack = append(stack, &stackItem{node: wrapNode(n.DefaultSemantics), visitor: v.Field("DefaultSemantics")})
		stack = append(stack, &stackItem{node: wrapNode(n.Type), visitor: v.Field("Type")})

	case *ColumnDefaultExpr:
		stack = append(stack, &stackItem{node: wrapNode(n.Expr), visitor: v.Field("Expr")})

	case *GeneratedColumnExpr:
		stack = append(stack, &stackItem{node: wrapNode(n.Expr), visitor: v.Field("Expr")})

	case *IdentityColumn:
		// nothing to do

	case *TableConstraint:
		stack = append(stack, &stackItem{node: wrapNode(n.Constraint), visitor: v.Field("Constraint")})

	case *ForeignKey:
		// nothing to do

	case *Check:
		stack = append(stack, &stackItem{node: wrapNode(n.Expr), visitor: v.Field("Expr")})

	case *IndexKey:
		// nothing to do

	case *Cluster:
		// nothing to do

	case *CreateRowDeletionPolicy:
		// nothing to do

	case *RowDeletionPolicy:
		// nothing to do

	case *CreateView:
		stack = append(stack, &stackItem{node: wrapNode(n.Query), visitor: v.Field("Query")})

	case *DropView:
		// nothing to do

	case *AlterTable:
		stack = append(stack, &stackItem{node: wrapNode(n.TableAlteration), visitor: v.Field("TableAlteration")})

	case *AlterIndex:
		stack = append(stack, &stackItem{node: wrapNode(n.IndexAlteration), visitor: v.Field("IndexAlteration")})

	case *AlterSequence:
		// nothing to do

	case *AlterChangeStream:
		stack = append(stack, &stackItem{node: wrapNode(n.ChangeStreamAlteration), visitor: v.Field("ChangeStreamAlteration")})

	case *AddSynonym:
		// nothing to do

	case *DropSynonym:
		// nothing to do

	case *RenameTo:
		// nothing to do

	case *AddColumn:
		// nothing to do

	case *AddTableConstraint:
		// nothing to do

	case *AddRowDeletionPolicy:
		// nothing to do

	case *DropColumn:
		// nothing to do

	case *DropConstraint:
		// nothing to do

	case *DropRowDeletionPolicy:
		// nothing to do

	case *ReplaceRowDeletionPolicy:
		// nothing to do

	case *SetOnDelete:
		// nothing to do

	case *AlterColumn:
		stack = append(stack, &stackItem{node: wrapNode(n.Alteration), visitor: v.Field("Alteration")})

	case *AlterColumnType:
		stack = append(stack, &stackItem{node: wrapNode(n.Type), visitor: v.Field("Type")})

	case *AlterColumnSetOptions:
		// nothing to do

	case *AlterColumnSetDefault:
		// nothing to do

	case *AlterColumnDropDefault:
		// nothing to do

	case *AlterColumnAlterIdentity:
		stack = append(stack, &stackItem{node: wrapNode(n.Alteration), visitor: v.Field("Alteration")})

	case *RestartCounterWith:
		// nothing to do

	case *SetSkipRange:
		// nothing to do

	case *NoSkipRange:
		// nothing to do

	case *SetNoSkipRange:
		// nothing to do

	case *DropTable:
		// nothing to do

	case *RenameTable:
		// nothing to do

	case *RenameTableTo:
		// nothing to do

	case *CreateIndex:
		// nothing to do

	case *CreateVectorIndex:
		// nothing to do

	case *CreateChangeStream:
		stack = append(stack, &stackItem{node: wrapNode(n.For), visitor: v.Field("For")})

	case *ChangeStreamForAll:
		// nothing to do

	case *ChangeStreamForTables:
		// nothing to do

	case *ChangeStreamForTable:
		// nothing to do

	case *ChangeStreamSetFor:
		stack = append(stack, &stackItem{node: wrapNode(n.For), visitor: v.Field("For")})

	case *ChangeStreamDropForAll:
		// nothing to do

	case *ChangeStreamSetOptions:
		// nothing to do

	case *Storing:
		// nothing to do

	case *InterleaveIn:
		// nothing to do

	case *AddStoredColumn:
		// nothing to do

	case *DropStoredColumn:
		// nothing to do

	case *DropIndex:
		// nothing to do

	case *DropVectorIndex:
		// nothing to do

	case *DropSequence:
		// nothing to do

	case *CreateRole:
		// nothing to do

	case *DropRole:
		// nothing to do

	case *DropChangeStream:
		// nothing to do

	case *Grant:
		stack = append(stack, &stackItem{node: wrapNode(n.Privilege), visitor: v.Field("Privilege")})

	case *Revoke:
		stack = append(stack, &stackItem{node: wrapNode(n.Privilege), visitor: v.Field("Privilege")})

	case *PrivilegeOnTable:
		// nothing to do

	case *SelectPrivilege:
		// nothing to do

	case *InsertPrivilege:
		// nothing to do

	case *UpdatePrivilege:
		// nothing to do

	case *DeletePrivilege:
		// nothing to do

	case *SelectPrivilegeOnChangeStream:
		// nothing to do

	case *SelectPrivilegeOnView:
		// nothing to do

	case *ExecutePrivilegeOnTableFunction:
		// nothing to do

	case *RolePrivilege:
		// nothing to do

	case *AlterStatistics:
		// nothing to do

	case *Analyze:
		// nothing to do

	case *CreateModelColumn:
		stack = append(stack, &stackItem{node: wrapNode(n.DataType), visitor: v.Field("DataType")})

	case *CreateModelInputOutput:
		// nothing to do

	case *CreateModel:
		// nothing to do

	case *AlterModel:
		// nothing to do

	case *DropModel:
		// nothing to do

	case *ScalarSchemaType:
		// nothing to do

	case *SizedSchemaType:
		stack = append(stack, &stackItem{node: wrapNode(n.Size), visitor: v.Field("Size")})

	case *ArraySchemaType:
		stack = append(stack, &stackItem{node: wrapNode(n.Item), visitor: v.Field("Item")})

	case *CreateSearchIndex:
		// nothing to do

	case *DropSearchIndex:
		// nothing to do

	case *AlterSearchIndex:
		stack = append(stack, &stackItem{node: wrapNode(n.IndexAlteration), visitor: v.Field("IndexAlteration")})

	case *CreatePropertyGraph:
		// nothing to do

	case *PropertyGraphContent:
		// nothing to do

	case *PropertyGraphNodeTables:
		// nothing to do

	case *PropertyGraphEdgeTables:
		// nothing to do

	case *PropertyGraphElementList:
		// nothing to do

	case *PropertyGraphElement:
		stack = append(stack, &stackItem{node: wrapNode(n.Properties), visitor: v.Field("Properties")})
		stack = append(stack, &stackItem{node: wrapNode(n.Keys), visitor: v.Field("Keys")})

	case *PropertyGraphSingleProperties:
		stack = append(stack, &stackItem{node: wrapNode(n.Properties), visitor: v.Field("Properties")})

	case *PropertyGraphLabelAndPropertiesList:
		// nothing to do

	case *PropertyGraphLabelAndProperties:
		stack = append(stack, &stackItem{node: wrapNode(n.Properties), visitor: v.Field("Properties")})
		stack = append(stack, &stackItem{node: wrapNode(n.Label), visitor: v.Field("Label")})

	case *PropertyGraphElementLabelLabelName:
		// nothing to do

	case *PropertyGraphElementLabelDefaultLabel:
		// nothing to do

	case *PropertyGraphNodeElementKey:
		// nothing to do

	case *PropertyGraphEdgeElementKeys:
		// nothing to do

	case *PropertyGraphElementKey:
		// nothing to do

	case *PropertyGraphSourceKey:
		// nothing to do

	case *PropertyGraphDestinationKey:
		// nothing to do

	case *PropertyGraphColumnNameList:
		// nothing to do

	case *PropertyGraphNoProperties:
		// nothing to do

	case *PropertyGraphPropertiesAre:
		// nothing to do

	case *PropertyGraphDerivedPropertyList:
		// nothing to do

	case *PropertyGraphDerivedProperty:
		stack = append(stack, &stackItem{node: wrapNode(n.Expr), visitor: v.Field("Expr")})

	case *DropPropertyGraph:
		// nothing to do

	case *WithAction:
		// nothing to do

	case *ThenReturn:
		// nothing to do

	case *Insert:
		stack = append(stack, &stackItem{node: wrapNode(n.Input), visitor: v.Field("Input")})

	case *ValuesInput:
		// nothing to do

	case *ValuesRow:
		// nothing to do

	case *DefaultExpr:
		stack = append(stack, &stackItem{node: wrapNode(n.Expr), visitor: v.Field("Expr")})

	case *SubQueryInput:
		stack = append(stack, &stackItem{node: wrapNode(n.Query), visitor: v.Field("Query")})

	case *Delete:
		// nothing to do

	case *Update:
		// nothing to do

	case *UpdateItem:
		// nothing to do

	case *Call:
		// nothing to do

	case *GQLGraphQuery:
		// nothing to do

	case *GQLQueryExpr:
		// nothing to do

	case *GQLGraphClause:
		// nothing to do

	case *GQLMultiLinearQueryStatement:
		// nothing to do

	case *GQLSimpleLinearQueryStatement:
		// nothing to do

	case *GQLSimpleLinearQueryStatementWithSetOperator:
		// nothing to do

	case *GQLCompositeLinearQueryStatement:
		// nothing to do

	case *GQLMatchStatement:
		// nothing to do

	case *GQLFilterStatement:
		stack = append(stack, &stackItem{node: wrapNode(n.Expr), visitor: v.Field("Expr")})

	case *GQLForStatement:
		stack = append(stack, &stackItem{node: wrapNode(n.ArrayExpression), visitor: v.Field("ArrayExpression")})

	case *GQLWithOffsetClause:
		// nothing to do

	case *GQLLimitClause:
		// nothing to do

	case *GQLOffsetClause:
		// nothing to do

	case *GQLLimitWithOffsetClause:
		// nothing to do

	case *GQLLimitStatement:
		stack = append(stack, &stackItem{node: wrapNode(n.Count), visitor: v.Field("Count")})

	case *GQLOffsetStatement:
		stack = append(stack, &stackItem{node: wrapNode(n.Count), visitor: v.Field("Count")})

	case *GQLOrderByStatement:
		// nothing to do

	case *GQLOrderBySpecification:
		stack = append(stack, &stackItem{node: wrapNode(n.Expr), visitor: v.Field("Expr")})

	case *GQLCollationSpecification:
		stack = append(stack, &stackItem{node: wrapNode(n.Specification), visitor: v.Field("Specification")})

	case *GQLWithStatement:
		// nothing to do

	case *GQLReturnItem:
		stack = append(stack, &stackItem{node: wrapNode(n.Item), visitor: v.Field("Item")})

	case *GQLReturnStatement:
		stack = append(stack, &stackItem{node: wrapNode(n.LimitAndOffsetClause), visitor: v.Field("LimitAndOffsetClause")})

	case *GQLLinearGraphVariable:
		stack = append(stack, &stackItem{node: wrapNode(n.Value), visitor: v.Field("Value")})

	case *GQLLetStatement:
		// nothing to do

	case *GQLGraphPattern:
		// nothing to do

	case *GQLTopLevelPathPattern:
		// nothing to do

	case *GQLFullEdgeAny:
		// nothing to do

	case *GQLFullEdgeLeft:
		// nothing to do

	case *GQLFullEdgeRight:
		// nothing to do

	case *GQLAbbreviatedEdgeAny:
		// nothing to do

	case *GQLAbbreviatedEdgeLeft:
		// nothing to do

	case *GQLAbbreviatedEdgeRight:
		// nothing to do

	case *GQLQuantifiablePathTerm:
		// nothing to do

	case *GQLPathPattern:
		// nothing to do

	case *GQLWhereClause:
		stack = append(stack, &stackItem{node: wrapNode(n.BoolExpression), visitor: v.Field("BoolExpression")})

	case *GQLPathMode:
		// nothing to do

	case *GQLFixedQuantifier:
		stack = append(stack, &stackItem{node: wrapNode(n.Bound), visitor: v.Field("Bound")})

	case *GQLBoundedQuantifier:
		stack = append(stack, &stackItem{node: wrapNode(n.UpperBound), visitor: v.Field("UpperBound")})
		stack = append(stack, &stackItem{node: wrapNode(n.LowerBound), visitor: v.Field("LowerBound")})

	case *GQLSubpathPattern:
		// nothing to do

	case *GQLNodePattern:
		// nothing to do

	case *GQLPatternFiller:
		// nothing to do

	case *GQLIsLabelCondition:
		// nothing to do

	case *GQLLabelOrExpression:
		stack = append(stack, &stackItem{node: wrapNode(n.Right), visitor: v.Field("Right")})
		stack = append(stack, &stackItem{node: wrapNode(n.Left), visitor: v.Field("Left")})

	case *GQLLabelParenExpression:
		stack = append(stack, &stackItem{node: wrapNode(n.LabelExpr), visitor: v.Field("LabelExpr")})

	case *GQLLabelAndExpression:
		stack = append(stack, &stackItem{node: wrapNode(n.Right), visitor: v.Field("Right")})
		stack = append(stack, &stackItem{node: wrapNode(n.Left), visitor: v.Field("Left")})

	case *GQLLabelNotExpression:
		stack = append(stack, &stackItem{node: wrapNode(n.LabelExpression), visitor: v.Field("LabelExpression")})

	case *GQLLabelName:
		// nothing to do

	case *GQLPropertyFilters:
		// nothing to do

	case *GQLElementProperty:
		stack = append(stack, &stackItem{node: wrapNode(n.ElementPropertyValue), visitor: v.Field("ElementPropertyValue")})

	case *GQLPathSearchPrefix:
		// nothing to do
	}
	return stack
}
